{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { capTableService } from '../services/capTableService';\nexport const useCapTable = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [capTable, setCapTable] = useState(null);\n  const [rounds, setRounds] = useState([]);\n  const [shareholders, setShareholders] = useState([]);\n  const [shareClasses, setShareClasses] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [preferenceTerms, setPreferenceTerms] = useState([]);\n\n  // Load all data\n  const loadData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [shareholdersData, shareClassesData, roundsData, transactionsData, preferenceTermsData, capTableData] = await Promise.all([capTableService.getShareholders(), capTableService.getShareClasses(), capTableService.getFinancingRounds(), capTableService.getTransactions(), capTableService.getPreferenceTerms(), capTableService.getCapTableAtRound()]);\n      setShareholders(shareholdersData);\n      setShareClasses(shareClassesData);\n      setRounds(roundsData);\n      setTransactions(transactionsData);\n      setPreferenceTerms(preferenceTermsData);\n      setCapTable(capTableData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load cap table at specific round\n  const loadCapTableAtRound = useCallback(async roundId => {\n    try {\n      setLoading(true);\n      const data = await capTableService.getCapTableAtRound(roundId);\n      setCapTable(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table at round:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Calculate exit scenario\n  const calculateExitScenario = useCallback(async (acquisitionAmount, acquisitionPercentage, preferenceType) => {\n    try {\n      const result = await capTableService.calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      console.error('Error calculating exit scenario:', err);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for shareholders\n  const addShareholder = useCallback(async shareholder => {\n    try {\n      console.log('useCapTable: Adding shareholder:', shareholder);\n      const newShareholder = await capTableService.createShareholder(shareholder);\n      console.log('useCapTable: Created shareholder:', newShareholder);\n      console.log('useCapTable: Current shareholders before update:', shareholders);\n      setShareholders(prev => {\n        const updated = [...prev, newShareholder];\n        console.log('useCapTable: Updated shareholders list:', updated);\n        return updated;\n      });\n      return newShareholder;\n    } catch (err) {\n      console.error('useCapTable: Error adding shareholder:', err);\n      setError(err.message);\n      throw err;\n    }\n  }, [shareholders]);\n  const updateShareholder = useCallback(async (id, updates) => {\n    try {\n      const updatedShareholder = await capTableService.updateShareholder(id, updates);\n      setShareholders(prev => prev.map(sh => sh.id === id ? updatedShareholder : sh));\n      return updatedShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n  const deleteShareholder = useCallback(async id => {\n    try {\n      await capTableService.deleteShareholder(id);\n      setShareholders(prev => prev.filter(sh => sh.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for rounds\n  const addRound = useCallback(async round => {\n    try {\n      const newRound = await capTableService.createFinancingRound(round);\n      setRounds(prev => [newRound, ...prev]);\n      return newRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n  const updateRound = useCallback(async (id, updates) => {\n    try {\n      const updatedRound = await capTableService.updateFinancingRound(id, updates);\n      setRounds(prev => prev.map(r => r.id === id ? updatedRound : r));\n      return updatedRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n  const deleteRound = useCallback(async id => {\n    try {\n      await capTableService.deleteFinancingRound(id);\n      setRounds(prev => prev.filter(r => r.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for transactions\n  const addTransaction = useCallback(async transaction => {\n    try {\n      const newTransaction = await capTableService.createTransaction(transaction);\n      setTransactions(prev => [...prev, newTransaction]);\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n      return newTransaction;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n  const updateTransaction = useCallback(async (id, updates) => {\n    try {\n      const updatedTransaction = await capTableService.updateTransaction(id, updates);\n      setTransactions(prev => prev.map(t => t.id === id ? updatedTransaction : t));\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n      return updatedTransaction;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n  const deleteTransaction = useCallback(async id => {\n    try {\n      await capTableService.deleteTransaction(id);\n      setTransactions(prev => prev.filter(t => t.id !== id));\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n\n  // CRUD operations for preference terms\n  const addPreferenceTerm = useCallback(async term => {\n    try {\n      const newTerm = await capTableService.createPreferenceTerm(term);\n      setPreferenceTerms(prev => [...prev, newTerm]);\n      return newTerm;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // Load data on mount\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n  return {\n    // State\n    loading,\n    error,\n    capTable,\n    rounds,\n    shareholders,\n    shareClasses,\n    transactions,\n    preferenceTerms,\n    // Actions\n    loadData,\n    loadCapTableAtRound,\n    calculateExitScenario,\n    // Shareholder operations\n    addShareholder,\n    updateShareholder,\n    deleteShareholder,\n    // Round operations\n    addRound,\n    updateRound,\n    deleteRound,\n    // Transaction operations\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    // Preference term operations\n    addPreferenceTerm,\n    // Utility\n    clearError: () => setError(null)\n  };\n};\n_s(useCapTable, \"ddgJ12CoSQLEPjJ6ddDDNG5UP6w=\");","map":{"version":3,"names":["useState","useEffect","useCallback","capTableService","useCapTable","_s","loading","setLoading","error","setError","capTable","setCapTable","rounds","setRounds","shareholders","setShareholders","shareClasses","setShareClasses","transactions","setTransactions","preferenceTerms","setPreferenceTerms","loadData","shareholdersData","shareClassesData","roundsData","transactionsData","preferenceTermsData","capTableData","Promise","all","getShareholders","getShareClasses","getFinancingRounds","getTransactions","getPreferenceTerms","getCapTableAtRound","err","message","console","loadCapTableAtRound","roundId","data","calculateExitScenario","acquisitionAmount","acquisitionPercentage","preferenceType","result","addShareholder","shareholder","log","newShareholder","createShareholder","prev","updated","updateShareholder","id","updates","updatedShareholder","map","sh","deleteShareholder","filter","addRound","round","newRound","createFinancingRound","updateRound","updatedRound","updateFinancingRound","r","deleteRound","deleteFinancingRound","addTransaction","transaction","newTransaction","createTransaction","updateTransaction","updatedTransaction","t","deleteTransaction","addPreferenceTerm","term","newTerm","createPreferenceTerm","clearError"],"sources":["/Users/markgiblin/Desktop/layrbase/src/hooks/useCapTable.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { capTableService } from '../services/capTableService';\n\nexport const useCapTable = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [capTable, setCapTable] = useState(null);\n  const [rounds, setRounds] = useState([]);\n  const [shareholders, setShareholders] = useState([]);\n  const [shareClasses, setShareClasses] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [preferenceTerms, setPreferenceTerms] = useState([]);\n\n  // Load all data\n  const loadData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [\n        shareholdersData,\n        shareClassesData,\n        roundsData,\n        transactionsData,\n        preferenceTermsData,\n        capTableData\n      ] = await Promise.all([\n        capTableService.getShareholders(),\n        capTableService.getShareClasses(),\n        capTableService.getFinancingRounds(),\n        capTableService.getTransactions(),\n        capTableService.getPreferenceTerms(),\n        capTableService.getCapTableAtRound()\n      ]);\n\n      setShareholders(shareholdersData);\n      setShareClasses(shareClassesData);\n      setRounds(roundsData);\n      setTransactions(transactionsData);\n      setPreferenceTerms(preferenceTermsData);\n      setCapTable(capTableData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load cap table at specific round\n  const loadCapTableAtRound = useCallback(async (roundId) => {\n    try {\n      setLoading(true);\n      const data = await capTableService.getCapTableAtRound(roundId);\n      setCapTable(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table at round:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Calculate exit scenario\n  const calculateExitScenario = useCallback(async (acquisitionAmount, acquisitionPercentage, preferenceType) => {\n    try {\n      const result = await capTableService.calculateExitScenario(\n        acquisitionAmount,\n        acquisitionPercentage,\n        preferenceType\n      );\n      return result;\n    } catch (err) {\n      setError(err.message);\n      console.error('Error calculating exit scenario:', err);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for shareholders\n  const addShareholder = useCallback(async (shareholder) => {\n    try {\n      console.log('useCapTable: Adding shareholder:', shareholder);\n      const newShareholder = await capTableService.createShareholder(shareholder);\n      console.log('useCapTable: Created shareholder:', newShareholder);\n      console.log('useCapTable: Current shareholders before update:', shareholders);\n      setShareholders(prev => {\n        const updated = [...prev, newShareholder];\n        console.log('useCapTable: Updated shareholders list:', updated);\n        return updated;\n      });\n      return newShareholder;\n    } catch (err) {\n      console.error('useCapTable: Error adding shareholder:', err);\n      setError(err.message);\n      throw err;\n    }\n  }, [shareholders]);\n\n  const updateShareholder = useCallback(async (id, updates) => {\n    try {\n      const updatedShareholder = await capTableService.updateShareholder(id, updates);\n      setShareholders(prev => prev.map(sh => sh.id === id ? updatedShareholder : sh));\n      return updatedShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  const deleteShareholder = useCallback(async (id) => {\n    try {\n      await capTableService.deleteShareholder(id);\n      setShareholders(prev => prev.filter(sh => sh.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for rounds\n  const addRound = useCallback(async (round) => {\n    try {\n      const newRound = await capTableService.createFinancingRound(round);\n      setRounds(prev => [newRound, ...prev]);\n      return newRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  const updateRound = useCallback(async (id, updates) => {\n    try {\n      const updatedRound = await capTableService.updateFinancingRound(id, updates);\n      setRounds(prev => prev.map(r => r.id === id ? updatedRound : r));\n      return updatedRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  const deleteRound = useCallback(async (id) => {\n    try {\n      await capTableService.deleteFinancingRound(id);\n      setRounds(prev => prev.filter(r => r.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // CRUD operations for transactions\n  const addTransaction = useCallback(async (transaction) => {\n    try {\n      const newTransaction = await capTableService.createTransaction(transaction);\n      setTransactions(prev => [...prev, newTransaction]);\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n      return newTransaction;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n\n  const updateTransaction = useCallback(async (id, updates) => {\n    try {\n      const updatedTransaction = await capTableService.updateTransaction(id, updates);\n      setTransactions(prev => prev.map(t => t.id === id ? updatedTransaction : t));\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n      return updatedTransaction;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n\n  const deleteTransaction = useCallback(async (id) => {\n    try {\n      await capTableService.deleteTransaction(id);\n      setTransactions(prev => prev.filter(t => t.id !== id));\n      // Reload cap table to reflect changes\n      await loadCapTableAtRound();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [loadCapTableAtRound]);\n\n  // CRUD operations for preference terms\n  const addPreferenceTerm = useCallback(async (term) => {\n    try {\n      const newTerm = await capTableService.createPreferenceTerm(term);\n      setPreferenceTerms(prev => [...prev, newTerm]);\n      return newTerm;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  // Load data on mount\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return {\n    // State\n    loading,\n    error,\n    capTable,\n    rounds,\n    shareholders,\n    shareClasses,\n    transactions,\n    preferenceTerms,\n    \n    // Actions\n    loadData,\n    loadCapTableAtRound,\n    calculateExitScenario,\n    \n    // Shareholder operations\n    addShareholder,\n    updateShareholder,\n    deleteShareholder,\n    \n    // Round operations\n    addRound,\n    updateRound,\n    deleteRound,\n    \n    // Transaction operations\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    \n    // Preference term operations\n    addPreferenceTerm,\n    \n    // Utility\n    clearError: () => setError(null)\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}