{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Template operations\nexport const getTemplates = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_templates').select('*').eq('is_active', true).order('name');\n  if (error) throw error;\n  return data;\n};\nexport const getTemplateById = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_templates').select('*').eq('id', id).single();\n  if (error) throw error;\n  return data;\n};\n\n// Contract operations\nexport const getContracts = async () => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('get_organization_contracts');\n  if (error) throw error;\n  return data;\n};\nexport const createContractFromTemplate = async (templateId, contractData) => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('create_contract_from_template', {\n    p_template_id: templateId,\n    p_name: contractData.name,\n    p_contract_data: contractData.data,\n    p_description: contractData.description,\n    p_folder_id: contractData.folderId,\n    p_effective_date: contractData.effectiveDate,\n    p_expiry_date: contractData.expiryDate,\n    p_organization_id: contractData.organizationId\n  });\n  if (error) throw error;\n  return data;\n};\nexport const createContract = async (contractData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n  const {\n    data,\n    error\n  } = await supabase.rpc('create_contract_direct', {\n    p_name: contractData.name,\n    p_organization_id: organizationId,\n    p_description: contractData.description,\n    p_folder_id: contractData.folder_id\n  });\n  if (error) {\n    console.error('[legalService.createContract] RLS error:', error);\n    throw error;\n  }\n\n  // RPCs can return a single object or an array with one object. Normalize it.\n  const newContract = Array.isArray(data) ? data[0] : data;\n  return newContract;\n};\nexport const updateContract = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contracts').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteContract = async id => {\n  const {\n    error\n  } = await supabase.from('legal_contracts').delete().eq('id', id);\n  if (error) throw error;\n};\n\n// Contract folder operations\nexport const getContractFolders = async organizationId => {\n  if (!organizationId) throw new Error(\"No organization selected.\");\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contract_folders').select('*').eq('organization_id', organizationId).order('name');\n  if (error) throw error;\n  return data;\n};\nexport const createContractFolder = async (folderData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contract_folders').insert({\n    ...folderData,\n    organization_id: organizationId\n  }).select().single();\n  if (error) throw error;\n  return data;\n};\n\n// Compliance deadline operations\nexport const getComplianceDeadlines = async () => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('get_organization_compliance_deadlines');\n  if (error) throw error;\n  return data;\n};\nexport const createComplianceDeadline = async deadlineData => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_compliance_deadlines').insert(deadlineData).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const updateComplianceDeadline = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_compliance_deadlines').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteComplianceDeadline = async id => {\n  const {\n    error\n  } = await supabase.from('legal_compliance_deadlines').delete().eq('id', id);\n  if (error) throw error;\n};\n\n// Insurance policy operations\nexport const getInsurancePolicies = async () => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('get_organization_insurance_policies');\n  if (error) throw error;\n  return data;\n};\nexport const createInsurancePolicy = async policyData => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_insurance_policies').insert(policyData).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const updateInsurancePolicy = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_insurance_policies').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteInsurancePolicy = async id => {\n  const {\n    error\n  } = await supabase.from('legal_insurance_policies').delete().eq('id', id);\n  if (error) throw error;\n};\n\n// File upload operations\nexport const uploadContractPDF = async (file, contractId, organizationId) => {\n  if (!organizationId) {\n    console.error(\"uploadContractPDF: Missing organizationId\");\n    throw new Error(\"Cannot upload file: organization ID is missing.\");\n  }\n  const fileName = `${organizationId}/contracts/${contractId}/${file.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('legal-documents').upload(fileName, file);\n  if (error) throw error;\n\n  // Get the public URL\n  const {\n    data: urlData\n  } = supabase.storage.from('legal-documents').getPublicUrl(fileName);\n\n  // Update the contract with the PDF path\n  await updateContract(contractId, {\n    pdf_file_path: urlData.publicUrl\n  });\n  return urlData.publicUrl;\n};\nexport const uploadPolicyDocument = async (file, policyId) => {\n  const fileName = `policies/${policyId}/${file.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('legal-documents').upload(fileName, file);\n  if (error) throw error;\n\n  // Get the public URL\n  const {\n    data: urlData\n  } = supabase.storage.from('legal-documents').getPublicUrl(fileName);\n\n  // Update the policy with the document path\n  await updateInsurancePolicy(policyId, {\n    policy_document_path: urlData.publicUrl\n  });\n  return urlData.publicUrl;\n};\n\n// Utility functions\nexport const generateContractPDF = async (contractData, template) => {\n  // This would integrate with a PDF generation service\n  // For now, we'll return a mock PDF path\n  console.log('Generating PDF for contract:', contractData);\n\n  // In a real implementation, you would:\n  // 1. Replace placeholders in template content with contract data\n  // 2. Generate PDF using a service like Puppeteer, jsPDF, or external API\n  // 3. Upload the generated PDF to storage\n  // 4. Return the file path\n\n  return `/mock-pdf-path/${contractData.name}.pdf`;\n};\nexport const debugRls = async organizationId => {\n  if (!organizationId) {\n    alert('DEBUG: No org ID passed to debugRls');\n    return null;\n  }\n  const {\n    data,\n    error\n  } = await supabase.rpc('debug_get_rls_context', {\n    p_org_id: organizationId\n  });\n  if (error) {\n    alert(`DEBUG: Error calling debug function: ${error.message}`);\n    return null;\n  }\n  return data[0];\n};","map":{"version":3,"names":["supabase","getTemplates","data","error","from","select","eq","order","getTemplateById","id","single","getContracts","rpc","createContractFromTemplate","templateId","contractData","p_template_id","p_name","name","p_contract_data","p_description","description","p_folder_id","folderId","p_effective_date","effectiveDate","p_expiry_date","expiryDate","p_organization_id","organizationId","createContract","Error","folder_id","console","newContract","Array","isArray","updateContract","updates","update","deleteContract","delete","getContractFolders","createContractFolder","folderData","insert","organization_id","getComplianceDeadlines","createComplianceDeadline","deadlineData","updateComplianceDeadline","deleteComplianceDeadline","getInsurancePolicies","createInsurancePolicy","policyData","updateInsurancePolicy","deleteInsurancePolicy","uploadContractPDF","file","contractId","fileName","storage","upload","urlData","getPublicUrl","pdf_file_path","publicUrl","uploadPolicyDocument","policyId","policy_document_path","generateContractPDF","template","log","debugRls","alert","p_org_id","message"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/legalService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Template operations\nexport const getTemplates = async () => {\n  const { data, error } = await supabase\n    .from('legal_templates')\n    .select('*')\n    .eq('is_active', true)\n    .order('name');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const getTemplateById = async (id) => {\n  const { data, error } = await supabase\n    .from('legal_templates')\n    .select('*')\n    .eq('id', id)\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\n// Contract operations\nexport const getContracts = async () => {\n  const { data, error } = await supabase\n    .rpc('get_organization_contracts');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createContractFromTemplate = async (templateId, contractData) => {\n  const { data, error } = await supabase\n    .rpc('create_contract_from_template', {\n      p_template_id: templateId,\n      p_name: contractData.name,\n      p_contract_data: contractData.data,\n      p_description: contractData.description,\n      p_folder_id: contractData.folderId,\n      p_effective_date: contractData.effectiveDate,\n      p_expiry_date: contractData.expiryDate,\n      p_organization_id: contractData.organizationId\n    });\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createContract = async (contractData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n\n  const { data, error } = await supabase\n    .rpc('create_contract_direct', {\n      p_name: contractData.name,\n      p_organization_id: organizationId,\n      p_description: contractData.description,\n      p_folder_id: contractData.folder_id\n    });\n  \n  if (error) {\n    console.error('[legalService.createContract] RLS error:', error);\n    throw error;\n  }\n  \n  // RPCs can return a single object or an array with one object. Normalize it.\n  const newContract = Array.isArray(data) ? data[0] : data;\n  return newContract;\n};\n\nexport const updateContract = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_contracts')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteContract = async (id) => {\n  const { error } = await supabase\n    .from('legal_contracts')\n    .delete()\n    .eq('id', id);\n  \n  if (error) throw error;\n};\n\n// Contract folder operations\nexport const getContractFolders = async (organizationId) => {\n  if (!organizationId) throw new Error(\"No organization selected.\");\n  const { data, error } = await supabase\n    .from('legal_contract_folders')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .order('name');\n  if (error) throw error;\n  return data;\n};\n\nexport const createContractFolder = async (folderData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n\n  const { data, error } = await supabase\n    .from('legal_contract_folders')\n    .insert({ ...folderData, organization_id: organizationId })\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\n// Compliance deadline operations\nexport const getComplianceDeadlines = async () => {\n  const { data, error } = await supabase\n    .rpc('get_organization_compliance_deadlines');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createComplianceDeadline = async (deadlineData) => {\n  const { data, error } = await supabase\n    .from('legal_compliance_deadlines')\n    .insert(deadlineData)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const updateComplianceDeadline = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_compliance_deadlines')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteComplianceDeadline = async (id) => {\n  const { error } = await supabase\n    .from('legal_compliance_deadlines')\n    .delete()\n    .eq('id', id);\n  \n  if (error) throw error;\n};\n\n// Insurance policy operations\nexport const getInsurancePolicies = async () => {\n  const { data, error } = await supabase\n    .rpc('get_organization_insurance_policies');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createInsurancePolicy = async (policyData) => {\n  const { data, error } = await supabase\n    .from('legal_insurance_policies')\n    .insert(policyData)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const updateInsurancePolicy = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_insurance_policies')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteInsurancePolicy = async (id) => {\n  const { error } = await supabase\n    .from('legal_insurance_policies')\n    .delete()\n    .eq('id', id);\n  \n  if (error) throw error;\n};\n\n// File upload operations\nexport const uploadContractPDF = async (file, contractId, organizationId) => {\n  if (!organizationId) {\n    console.error(\"uploadContractPDF: Missing organizationId\");\n    throw new Error(\"Cannot upload file: organization ID is missing.\");\n  }\n  const fileName = `${organizationId}/contracts/${contractId}/${file.name}`;\n  \n  const { data, error } = await supabase.storage\n    .from('legal-documents')\n    .upload(fileName, file);\n  \n  if (error) throw error;\n  \n  // Get the public URL\n  const { data: urlData } = supabase.storage\n    .from('legal-documents')\n    .getPublicUrl(fileName);\n  \n  // Update the contract with the PDF path\n  await updateContract(contractId, { pdf_file_path: urlData.publicUrl });\n  \n  return urlData.publicUrl;\n};\n\nexport const uploadPolicyDocument = async (file, policyId) => {\n  const fileName = `policies/${policyId}/${file.name}`;\n  \n  const { data, error } = await supabase.storage\n    .from('legal-documents')\n    .upload(fileName, file);\n  \n  if (error) throw error;\n  \n  // Get the public URL\n  const { data: urlData } = supabase.storage\n    .from('legal-documents')\n    .getPublicUrl(fileName);\n  \n  // Update the policy with the document path\n  await updateInsurancePolicy(policyId, { policy_document_path: urlData.publicUrl });\n  \n  return urlData.publicUrl;\n};\n\n// Utility functions\nexport const generateContractPDF = async (contractData, template) => {\n  // This would integrate with a PDF generation service\n  // For now, we'll return a mock PDF path\n  console.log('Generating PDF for contract:', contractData);\n  \n  // In a real implementation, you would:\n  // 1. Replace placeholders in template content with contract data\n  // 2. Generate PDF using a service like Puppeteer, jsPDF, or external API\n  // 3. Upload the generated PDF to storage\n  // 4. Return the file path\n  \n  return `/mock-pdf-path/${contractData.name}.pdf`;\n};\n\nexport const debugRls = async (organizationId) => {\n  if (!organizationId) {\n    alert('DEBUG: No org ID passed to debugRls');\n    return null;\n  }\n  const { data, error } = await supabase.rpc('debug_get_rls_context', {\n    p_org_id: organizationId,\n  });\n\n  if (error) {\n    alert(`DEBUG: Error calling debug function: ${error.message}`);\n    return null;\n  }\n\n  return data[0];\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}