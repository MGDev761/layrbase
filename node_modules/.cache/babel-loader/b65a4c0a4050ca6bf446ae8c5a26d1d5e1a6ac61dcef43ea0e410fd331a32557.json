{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders() {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').select('*').order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareholder(shareholder) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').insert([shareholder]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateShareholder(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteShareholder(id) {\n    const {\n      error\n    } = await supabase.from('shareholders').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // Share Classes\n  async getShareClasses() {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').select('*').order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareClass(shareClass) {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').insert([shareClass]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Financing Rounds\n  async getFinancingRounds() {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').select(`\n        *,\n        share_classes(name)\n      `).order('date', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  },\n  async createFinancingRound(round) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').insert([round]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateFinancingRound(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Transactions\n  async getTransactions(roundId = null) {\n    let query = supabase.from('transactions').select(`\n        *,\n        shareholders(name, role),\n        financing_rounds(name, date, share_classes(name))\n      `).order('created_at');\n    if (roundId) {\n      query = query.eq('round_id', roundId);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) throw error;\n    return data;\n  },\n  async createTransaction(transaction) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').insert([transaction]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateTransaction(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteTransaction(id) {\n    const {\n      error\n    } = await supabase.from('transactions').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // Preference Terms\n  async getPreferenceTerms() {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').select(`\n        *,\n        share_classes(name)\n      `);\n    if (error) throw error;\n    return data;\n  },\n  async createPreferenceTerm(term) {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').insert([term]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Cap Table Calculations\n  async getCapTableAtRound(roundId = null) {\n    // Get all transactions up to the specified round\n    let query = supabase.from('transactions').select(`\n        *,\n        shareholders(name, role),\n        financing_rounds(name, date, share_classes(name))\n      `).order('financing_rounds(date)');\n    if (roundId) {\n      // Get the round date to filter transactions\n      const {\n        data: roundData\n      } = await supabase.from('financing_rounds').select('date').eq('id', roundId).single();\n      if (roundData) {\n        query = query.lte('financing_rounds.date', roundData.date);\n      }\n    }\n    const {\n      data: transactions,\n      error\n    } = await query;\n    if (error) throw error;\n\n    // Calculate cap table from transactions\n    return this.calculateCapTableFromTransactions(transactions);\n  },\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: tx.shareholders.name,\n          role: tx.shareholders.role,\n          shares: 0,\n          investment: 0,\n          shareClass: tx.financing_rounds.share_classes.name\n        };\n      }\n      holdings[shareholderId].shares += parseFloat(tx.shares_issued);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: holding.shares / totalShares * 100\n    }));\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0)\n      }\n    };\n  },\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const {\n      capTable\n    } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = acquisitionAmount * acquisitionPercentage / 100;\n\n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable.filter(shareholder => shareholder.shareClass.includes('Preferred')).map(shareholder => {\n      const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n      const multiplier = term ? term.multiplier : 1;\n      const preferenceAmount = shareholder.investment * multiplier;\n      const conversionValue = shareholder.ownership / 100 * acquisitionValue;\n      let finalValue;\n      if (preferenceType === 'non-participating') {\n        finalValue = Math.max(preferenceAmount, conversionValue);\n      } else {\n        finalValue = preferenceAmount + conversionValue;\n      }\n      return {\n        ...shareholder,\n        preferenceAmount,\n        conversionValue,\n        finalValue,\n        tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n        multiplier\n      };\n    });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? shareholder.ownership / totalCommonOwnership * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1\n        };\n      }\n    });\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds\n    };\n  }\n};","map":{"version":3,"names":["supabase","capTableService","getShareholders","data","error","from","select","order","createShareholder","shareholder","insert","single","updateShareholder","id","updates","update","eq","deleteShareholder","delete","getShareClasses","createShareClass","shareClass","getFinancingRounds","ascending","createFinancingRound","round","updateFinancingRound","getTransactions","roundId","query","createTransaction","transaction","updateTransaction","deleteTransaction","getPreferenceTerms","createPreferenceTerm","term","getCapTableAtRound","roundData","lte","date","transactions","calculateCapTableFromTransactions","holdings","totalShares","forEach","tx","shareholderId","shareholder_id","name","shareholders","role","shares","investment","financing_rounds","share_classes","parseFloat","shares_issued","investment_amount","capTable","Object","values","map","holding","ownership","summary","totalInvestment","reduce","sum","h","calculateExitScenario","acquisitionAmount","acquisitionPercentage","preferenceType","actualAcquisitionValue","preferenceTerms","calculateExitValues","acquisitionValue","preferencePayouts","filter","includes","find","t","multiplier","preferenceAmount","conversionValue","finalValue","Math","max","tookPreference","totalPreferencePayout","p","remainingProceeds","commonShareholders","s","totalCommonOwnership","exitCalculations","preferencePayout","commonShare","totalExitValue","calc"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/capTableService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders() {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .select('*')\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareholder(shareholder) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .insert([shareholder])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateShareholder(id, updates) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteShareholder(id) {\n    const { error } = await supabase\n      .from('shareholders')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  // Share Classes\n  async getShareClasses() {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .select('*')\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareClass(shareClass) {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .insert([shareClass])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Financing Rounds\n  async getFinancingRounds() {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .select(`\n        *,\n        share_classes(name)\n      `)\n      .order('date', { ascending: false });\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createFinancingRound(round) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .insert([round])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateFinancingRound(id, updates) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Transactions\n  async getTransactions(roundId = null) {\n    let query = supabase\n      .from('transactions')\n      .select(`\n        *,\n        shareholders(name, role),\n        financing_rounds(name, date, share_classes(name))\n      `)\n      .order('created_at');\n    \n    if (roundId) {\n      query = query.eq('round_id', roundId);\n    }\n    \n    const { data, error } = await query;\n    if (error) throw error;\n    return data;\n  },\n\n  async createTransaction(transaction) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .insert([transaction])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateTransaction(id, updates) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteTransaction(id) {\n    const { error } = await supabase\n      .from('transactions')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  // Preference Terms\n  async getPreferenceTerms() {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .select(`\n        *,\n        share_classes(name)\n      `);\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createPreferenceTerm(term) {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .insert([term])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Cap Table Calculations\n  async getCapTableAtRound(roundId = null) {\n    // Get all transactions up to the specified round\n    let query = supabase\n      .from('transactions')\n      .select(`\n        *,\n        shareholders(name, role),\n        financing_rounds(name, date, share_classes(name))\n      `)\n      .order('financing_rounds(date)');\n    \n    if (roundId) {\n      // Get the round date to filter transactions\n      const { data: roundData } = await supabase\n        .from('financing_rounds')\n        .select('date')\n        .eq('id', roundId)\n        .single();\n      \n      if (roundData) {\n        query = query.lte('financing_rounds.date', roundData.date);\n      }\n    }\n    \n    const { data: transactions, error } = await query;\n    if (error) throw error;\n\n    // Calculate cap table from transactions\n    return this.calculateCapTableFromTransactions(transactions);\n  },\n\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: tx.shareholders.name,\n          role: tx.shareholders.role,\n          shares: 0,\n          investment: 0,\n          shareClass: tx.financing_rounds.share_classes.name,\n        };\n      }\n      \n      holdings[shareholderId].shares += parseFloat(tx.shares_issued);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: (holding.shares / totalShares) * 100,\n    }));\n\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0),\n      }\n    };\n  },\n\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const { capTable } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = (acquisitionAmount * acquisitionPercentage) / 100;\n    \n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    \n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable\n      .filter(shareholder => shareholder.shareClass.includes('Preferred'))\n      .map(shareholder => {\n        const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n        const multiplier = term ? term.multiplier : 1;\n        const preferenceAmount = shareholder.investment * multiplier;\n        const conversionValue = (shareholder.ownership / 100) * acquisitionValue;\n        \n        let finalValue;\n        if (preferenceType === 'non-participating') {\n          finalValue = Math.max(preferenceAmount, conversionValue);\n        } else {\n          finalValue = preferenceAmount + conversionValue;\n        }\n\n        return {\n          ...shareholder,\n          preferenceAmount,\n          conversionValue,\n          finalValue,\n          tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n          multiplier,\n        };\n      });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? (shareholder.ownership / totalCommonOwnership) * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1,\n        };\n      }\n    });\n\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds,\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}