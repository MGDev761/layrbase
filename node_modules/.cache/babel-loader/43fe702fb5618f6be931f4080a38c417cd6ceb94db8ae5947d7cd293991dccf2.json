{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders(organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').select('*').eq('organization_id', organizationId).order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareholder(shareholder, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').insert([{\n      ...shareholder,\n      organization_id: organizationId\n    }]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateShareholder(id, updates, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').update(updates).eq('id', id).eq('organization_id', organizationId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteShareholder(id, organizationId) {\n    const {\n      error\n    } = await supabase.from('shareholders').delete().eq('id', id).eq('organization_id', organizationId);\n    if (error) throw error;\n  },\n  // Share Classes\n  async getShareClasses(organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').select('*').eq('organization_id', organizationId).order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareClass(shareClass, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').insert([{\n      ...shareClass,\n      organization_id: organizationId\n    }]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Financing Rounds\n  async getFinancingRounds(organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').select(`\n        *,\n        share_classes(name)\n      `).eq('organization_id', organizationId).order('date', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  },\n  async createFinancingRound(round, participants, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('create_financing_round_with_options', {\n      p_organization_id: organizationId,\n      round_name: round.name,\n      round_date: round.date,\n      pre_money_valuation: round.pre_money_valuation,\n      share_class_id: round.share_class_id,\n      option_pool_shares: round.option_pool_shares,\n      participants_data: participants.map(p => ({\n        shareholder_id: p.shareholder_id,\n        investment_amount: p.investment_amount\n      }))\n    });\n    if (error) {\n      console.error('Error creating financing round with options:', error);\n      throw error;\n    }\n    return data;\n  },\n  async updateFinancingRound(id, updates, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').update(updates).eq('id', id).eq('organization_id', organizationId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteFinancingRound(id, organizationId) {\n    const {\n      error\n    } = await supabase.from('financing_rounds').delete().eq('id', id).eq('organization_id', organizationId);\n    if (error) throw error;\n  },\n  // Transactions\n  async getTransactions(organizationId, roundId = null) {\n    try {\n      let query = supabase.from('transactions').select(`\n          *,\n          shareholders(name, role),\n          financing_rounds(name, date)\n        `).eq('organization_id', organizationId).order('created_at');\n      if (roundId) {\n        query = query.eq('round_id', roundId);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      return this.attachShareClassesToTransactions(data, organizationId);\n    } catch (error) {\n      console.error('Error in getTransactions:', error);\n      throw error;\n    }\n  },\n  async createTransaction(transaction, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').insert([{\n      ...transaction,\n      organization_id: organizationId\n    }]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateTransaction(id, updates, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').update(updates).eq('id', id).eq('organization_id', organizationId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteTransaction(id, organizationId) {\n    const {\n      error\n    } = await supabase.from('transactions').delete().eq('id', id).eq('organization_id', organizationId);\n    if (error) throw error;\n  },\n  // Preference Terms\n  async getPreferenceTerms(organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').select('*').eq('organization_id', organizationId);\n    if (error) throw error;\n    return data;\n  },\n  async createPreferenceTerm(term, organizationId) {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').insert([{\n      ...term,\n      organization_id: organizationId\n    }]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async getCapTableAtRound(organizationId, roundId = null) {\n    try {\n      const transactions = await this.getTransactions(organizationId, roundId);\n      return this.calculateCapTableFromTransactions(transactions);\n    } catch (error) {\n      console.error('Error in getCapTableAtRound:', error);\n      throw error;\n    }\n  },\n  async attachShareClassesToTransactions(transactions, organizationId) {\n    if (!transactions || transactions.length === 0) return [];\n    const roundIds = [...new Set(transactions.map(tx => tx.round_id).filter(Boolean))];\n    if (roundIds.length === 0) return transactions;\n    const {\n      data: roundsData,\n      error\n    } = await supabase.from('financing_rounds').select('id, share_classes(name)').in('id', roundIds).eq('organization_id', organizationId);\n    if (error) {\n      console.error('Error fetching rounds to attach share classes:', error);\n      return transactions;\n    }\n    const roundMap = {};\n    roundsData === null || roundsData === void 0 ? void 0 : roundsData.forEach(round => {\n      var _round$share_classes;\n      roundMap[round.id] = ((_round$share_classes = round.share_classes) === null || _round$share_classes === void 0 ? void 0 : _round$share_classes.name) || 'Common';\n    });\n    return transactions.map(tx => ({\n      ...tx,\n      shareClass: roundMap[tx.round_id] || 'Common'\n    }));\n  },\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        var _tx$shareholders, _tx$shareholders2;\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: ((_tx$shareholders = tx.shareholders) === null || _tx$shareholders === void 0 ? void 0 : _tx$shareholders.name) || 'Unknown',\n          role: ((_tx$shareholders2 = tx.shareholders) === null || _tx$shareholders2 === void 0 ? void 0 : _tx$shareholders2.role) || 'Unknown',\n          shares: 0,\n          investment: 0,\n          shareClass: tx.shareClass || 'Common'\n        };\n      }\n      holdings[shareholderId].shares += parseFloat(tx.shares_issued || 0);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued || 0);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: totalShares > 0 ? holding.shares / totalShares * 100 : 0\n    }));\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0)\n      }\n    };\n  },\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const {\n      capTable\n    } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = acquisitionAmount * acquisitionPercentage / 100;\n\n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable.filter(shareholder => shareholder.shareClass.includes('Preferred')).map(shareholder => {\n      const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n      const multiplier = term ? term.multiplier : 1;\n      const preferenceAmount = shareholder.investment * multiplier;\n      const conversionValue = shareholder.ownership / 100 * acquisitionValue;\n      let finalValue;\n      if (preferenceType === 'non-participating') {\n        finalValue = Math.max(preferenceAmount, conversionValue);\n      } else {\n        finalValue = preferenceAmount + conversionValue;\n      }\n      return {\n        ...shareholder,\n        preferenceAmount,\n        conversionValue,\n        finalValue,\n        tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n        multiplier\n      };\n    });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? shareholder.ownership / totalCommonOwnership * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1\n        };\n      }\n    });\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds\n    };\n  }\n};","map":{"version":3,"names":["supabase","capTableService","getShareholders","organizationId","data","error","from","select","eq","order","createShareholder","shareholder","insert","organization_id","single","updateShareholder","id","updates","update","deleteShareholder","delete","getShareClasses","createShareClass","shareClass","getFinancingRounds","ascending","createFinancingRound","round","participants","rpc","p_organization_id","round_name","name","round_date","date","pre_money_valuation","share_class_id","option_pool_shares","participants_data","map","p","shareholder_id","investment_amount","console","updateFinancingRound","deleteFinancingRound","getTransactions","roundId","query","attachShareClassesToTransactions","createTransaction","transaction","updateTransaction","deleteTransaction","getPreferenceTerms","createPreferenceTerm","term","getCapTableAtRound","transactions","calculateCapTableFromTransactions","length","roundIds","Set","tx","round_id","filter","Boolean","roundsData","in","roundMap","forEach","_round$share_classes","share_classes","holdings","totalShares","shareholderId","_tx$shareholders","_tx$shareholders2","shareholders","role","shares","investment","parseFloat","shares_issued","capTable","Object","values","holding","ownership","summary","totalInvestment","reduce","sum","h","calculateExitScenario","acquisitionAmount","acquisitionPercentage","preferenceType","actualAcquisitionValue","preferenceTerms","calculateExitValues","acquisitionValue","preferencePayouts","includes","find","t","multiplier","preferenceAmount","conversionValue","finalValue","Math","max","tookPreference","totalPreferencePayout","remainingProceeds","commonShareholders","s","totalCommonOwnership","exitCalculations","preferencePayout","commonShare","totalExitValue","calc"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/capTableService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders(organizationId) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .select('*')\n      .eq('organization_id', organizationId)\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareholder(shareholder, organizationId) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .insert([{ ...shareholder, organization_id: organizationId }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateShareholder(id, updates, organizationId) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .update(updates)\n      .eq('id', id)\n      .eq('organization_id', organizationId)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteShareholder(id, organizationId) {\n    const { error } = await supabase\n      .from('shareholders')\n      .delete()\n      .eq('id', id)\n      .eq('organization_id', organizationId);\n    \n    if (error) throw error;\n  },\n\n  // Share Classes\n  async getShareClasses(organizationId) {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .select('*')\n      .eq('organization_id', organizationId)\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareClass(shareClass, organizationId) {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .insert([{ ...shareClass, organization_id: organizationId }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Financing Rounds\n  async getFinancingRounds(organizationId) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .select(`\n        *,\n        share_classes(name)\n      `)\n      .eq('organization_id', organizationId)\n      .order('date', { ascending: false });\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createFinancingRound(round, participants, organizationId) {\n    const { data, error } = await supabase.rpc('create_financing_round_with_options', {\n      p_organization_id: organizationId,\n      round_name: round.name,\n      round_date: round.date,\n      pre_money_valuation: round.pre_money_valuation,\n      share_class_id: round.share_class_id,\n      option_pool_shares: round.option_pool_shares,\n      participants_data: participants.map(p => ({\n        shareholder_id: p.shareholder_id,\n        investment_amount: p.investment_amount\n      }))\n    });\n\n    if (error) {\n      console.error('Error creating financing round with options:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n\n  async updateFinancingRound(id, updates, organizationId) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .update(updates)\n      .eq('id', id)\n      .eq('organization_id', organizationId)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteFinancingRound(id, organizationId) {\n    const { error } = await supabase\n      .from('financing_rounds')\n      .delete()\n      .eq('id', id)\n      .eq('organization_id', organizationId);\n    \n    if (error) throw error;\n  },\n\n  // Transactions\n  async getTransactions(organizationId, roundId = null) {\n    try {\n      let query = supabase\n        .from('transactions')\n        .select(`\n          *,\n          shareholders(name, role),\n          financing_rounds(name, date)\n        `)\n        .eq('organization_id', organizationId)\n        .order('created_at');\n      \n      if (roundId) {\n        query = query.eq('round_id', roundId);\n      }\n      \n      const { data, error } = await query;\n      if (error) throw error;\n      \n      return this.attachShareClassesToTransactions(data, organizationId);\n    } catch (error) {\n      console.error('Error in getTransactions:', error);\n      throw error;\n    }\n  },\n\n  async createTransaction(transaction, organizationId) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .insert([{ ...transaction, organization_id: organizationId }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateTransaction(id, updates, organizationId) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .update(updates)\n      .eq('id', id)\n      .eq('organization_id', organizationId)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteTransaction(id, organizationId) {\n    const { error } = await supabase\n      .from('transactions')\n      .delete()\n      .eq('id', id)\n      .eq('organization_id', organizationId);\n    \n    if (error) throw error;\n  },\n\n  // Preference Terms\n  async getPreferenceTerms(organizationId) {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .select('*')\n      .eq('organization_id', organizationId);\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createPreferenceTerm(term, organizationId) {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .insert([{ ...term, organization_id: organizationId }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async getCapTableAtRound(organizationId, roundId = null) {\n    try {\n      const transactions = await this.getTransactions(organizationId, roundId);\n      return this.calculateCapTableFromTransactions(transactions);\n    } catch (error) {\n      console.error('Error in getCapTableAtRound:', error);\n      throw error;\n    }\n  },\n\n  async attachShareClassesToTransactions(transactions, organizationId) {\n    if (!transactions || transactions.length === 0) return [];\n    \n    const roundIds = [...new Set(transactions.map(tx => tx.round_id).filter(Boolean))];\n    if (roundIds.length === 0) return transactions;\n    \n    const { data: roundsData, error } = await supabase\n      .from('financing_rounds')\n      .select('id, share_classes(name)')\n      .in('id', roundIds)\n      .eq('organization_id', organizationId);\n\n    if (error) {\n      console.error('Error fetching rounds to attach share classes:', error);\n      return transactions;\n    }\n    \n    const roundMap = {};\n    roundsData?.forEach(round => {\n      roundMap[round.id] = round.share_classes?.name || 'Common';\n    });\n    \n    return transactions.map(tx => ({\n      ...tx,\n      shareClass: roundMap[tx.round_id] || 'Common'\n    }));\n  },\n\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: tx.shareholders?.name || 'Unknown',\n          role: tx.shareholders?.role || 'Unknown',\n          shares: 0,\n          investment: 0,\n          shareClass: tx.shareClass || 'Common',\n        };\n      }\n      \n      holdings[shareholderId].shares += parseFloat(tx.shares_issued || 0);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued || 0);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: totalShares > 0 ? (holding.shares / totalShares) * 100 : 0,\n    }));\n\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0),\n      }\n    };\n  },\n\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const { capTable } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = (acquisitionAmount * acquisitionPercentage) / 100;\n    \n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    \n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable\n      .filter(shareholder => shareholder.shareClass.includes('Preferred'))\n      .map(shareholder => {\n        const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n        const multiplier = term ? term.multiplier : 1;\n        const preferenceAmount = shareholder.investment * multiplier;\n        const conversionValue = (shareholder.ownership / 100) * acquisitionValue;\n        \n        let finalValue;\n        if (preferenceType === 'non-participating') {\n          finalValue = Math.max(preferenceAmount, conversionValue);\n        } else {\n          finalValue = preferenceAmount + conversionValue;\n        }\n\n        return {\n          ...shareholder,\n          preferenceAmount,\n          conversionValue,\n          finalValue,\n          tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n          multiplier,\n        };\n      });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? (shareholder.ownership / totalCommonOwnership) * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1,\n        };\n      }\n    });\n\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds,\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}