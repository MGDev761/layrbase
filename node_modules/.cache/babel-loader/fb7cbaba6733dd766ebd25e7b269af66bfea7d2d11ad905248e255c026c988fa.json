{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { capTableService } from '../services/capTableService';\nexport const useCapTable = () => {\n  _s();\n  const {\n    currentOrganization\n  } = useAuth();\n  const organizationId = currentOrganization === null || currentOrganization === void 0 ? void 0 : currentOrganization.organization_id;\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [capTable, setCapTable] = useState(null);\n  const [rounds, setRounds] = useState([]);\n  const [shareholders, setShareholders] = useState([]);\n  const [shareClasses, setShareClasses] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [preferenceTerms, setPreferenceTerms] = useState([]);\n\n  // Load all data\n  const loadData = useCallback(async () => {\n    if (!organizationId) {\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const [shareholdersData, shareClassesData, roundsData, transactionsData, preferenceTermsData, capTableData] = await Promise.all([capTableService.getShareholders(organizationId), capTableService.getShareClasses(organizationId), capTableService.getFinancingRounds(organizationId), capTableService.getTransactions(organizationId), capTableService.getPreferenceTerms(organizationId), capTableService.getCapTableAtRound(organizationId)]);\n      setShareholders(shareholdersData);\n      setShareClasses(shareClassesData);\n      setRounds(roundsData);\n      setTransactions(transactionsData);\n      setPreferenceTerms(preferenceTermsData);\n      setCapTable(capTableData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId]);\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  // Load cap table at specific round\n  const loadCapTableAtRound = useCallback(async roundId => {\n    if (!organizationId) return;\n    try {\n      setLoading(true);\n      const data = await capTableService.getCapTableAtRound(organizationId, roundId);\n      setCapTable(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table at round:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId]);\n\n  // Calculate exit scenario\n  const calculateExitScenario = useCallback(async (acquisitionAmount, acquisitionPercentage, preferenceType) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const result = await capTableService.calculateExitScenario(organizationId, acquisitionAmount, acquisitionPercentage, preferenceType);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      console.error('Error calculating exit scenario:', err);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for shareholders\n  const addShareholder = useCallback(async shareholder => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newShareholder = await capTableService.createShareholder(shareholder, organizationId);\n      setShareholders(prev => [...prev, newShareholder]);\n      return newShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n  const updateShareholder = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const updatedShareholder = await capTableService.updateShareholder(id, updates, organizationId);\n      setShareholders(prev => prev.map(sh => sh.id === id ? updatedShareholder : sh));\n      return updatedShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n  const deleteShareholder = useCallback(async id => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      await capTableService.deleteShareholder(id, organizationId);\n      setShareholders(prev => prev.filter(sh => sh.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD for Share Classes\n  const addShareClass = useCallback(async shareClassData => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newShareClass = await capTableService.createShareClass(shareClassData, organizationId);\n      setShareClasses(prev => [...prev, newShareClass].sort((a, b) => a.name.localeCompare(b.name)));\n      return newShareClass;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for rounds\n  const addRound = useCallback(async (roundData, participants) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newRound = await capTableService.createFinancingRound(roundData, participants, organizationId);\n      setRounds(prev => [newRound.round, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date)));\n      setTransactions(prev => [...prev, ...newRound.transactions]);\n      const shareholdersData = await capTableService.getShareholders(organizationId);\n      setShareholders(shareholdersData);\n      return newRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n  const updateRound = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const updatedRound = await capTableService.updateFinancingRound(id, updates, organizationId);\n      setRounds(prev => prev.map(r => r.id === id ? updatedRound : r));\n      return updatedRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n  const deleteRound = useCallback(async id => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      await capTableService.deleteFinancingRound(id, organizationId);\n      setRounds(prev => prev.filter(r => r.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for transactions\n  const addTransaction = useCallback(async transaction => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    const newTransaction = await capTableService.createTransaction(transaction, organizationId);\n    await loadData(); // Reload all data for simplicity\n    return newTransaction;\n  }, [organizationId, loadData]);\n  const updateTransaction = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    const updatedTransaction = await capTableService.updateTransaction(id, updates, organizationId);\n    await loadData(); // Reload all data\n    return updatedTransaction;\n  }, [organizationId, loadData]);\n  const deleteTransaction = useCallback(async id => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    await capTableService.deleteTransaction(id, organizationId);\n    await loadData(); // Reload all data\n  }, [organizationId, loadData]);\n\n  // CRUD operations for preference terms\n  const addPreferenceTerm = useCallback(async term => {\n    try {\n      const newTerm = await capTableService.createPreferenceTerm(term);\n      setPreferenceTerms(prev => [...prev, newTerm]);\n      return newTerm;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n  return {\n    // State\n    loading,\n    error,\n    capTable,\n    rounds,\n    shareholders,\n    shareClasses,\n    transactions,\n    preferenceTerms,\n    // Actions\n    loadData,\n    loadCapTableAtRound,\n    calculateExitScenario,\n    // Shareholder operations\n    addShareholder,\n    updateShareholder,\n    deleteShareholder,\n    // Share Class operations\n    addShareClass,\n    // Round operations\n    addRound,\n    updateRound,\n    deleteRound,\n    // Transaction operations\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    // Preference term operations\n    addPreferenceTerm,\n    // Utility\n    clearError: () => setError(null)\n  };\n};\n_s(useCapTable, \"fEYiXW8xJXnAFVf6CvEqQitKFPg=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","capTableService","useCapTable","_s","currentOrganization","organizationId","organization_id","loading","setLoading","error","setError","capTable","setCapTable","rounds","setRounds","shareholders","setShareholders","shareClasses","setShareClasses","transactions","setTransactions","preferenceTerms","setPreferenceTerms","loadData","shareholdersData","shareClassesData","roundsData","transactionsData","preferenceTermsData","capTableData","Promise","all","getShareholders","getShareClasses","getFinancingRounds","getTransactions","getPreferenceTerms","getCapTableAtRound","err","message","console","loadCapTableAtRound","roundId","data","calculateExitScenario","acquisitionAmount","acquisitionPercentage","preferenceType","Error","result","addShareholder","shareholder","newShareholder","createShareholder","prev","updateShareholder","id","updates","updatedShareholder","map","sh","deleteShareholder","filter","addShareClass","shareClassData","newShareClass","createShareClass","sort","a","b","name","localeCompare","addRound","roundData","participants","newRound","createFinancingRound","round","Date","date","updateRound","updatedRound","updateFinancingRound","r","deleteRound","deleteFinancingRound","addTransaction","transaction","newTransaction","createTransaction","updateTransaction","updatedTransaction","deleteTransaction","addPreferenceTerm","term","newTerm","createPreferenceTerm","clearError"],"sources":["/Users/markgiblin/Desktop/layrbase/src/hooks/useCapTable.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { capTableService } from '../services/capTableService';\n\nexport const useCapTable = () => {\n  const { currentOrganization } = useAuth();\n  const organizationId = currentOrganization?.organization_id;\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [capTable, setCapTable] = useState(null);\n  const [rounds, setRounds] = useState([]);\n  const [shareholders, setShareholders] = useState([]);\n  const [shareClasses, setShareClasses] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [preferenceTerms, setPreferenceTerms] = useState([]);\n\n  // Load all data\n  const loadData = useCallback(async () => {\n    if (!organizationId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [\n        shareholdersData,\n        shareClassesData,\n        roundsData,\n        transactionsData,\n        preferenceTermsData,\n        capTableData\n      ] = await Promise.all([\n        capTableService.getShareholders(organizationId),\n        capTableService.getShareClasses(organizationId),\n        capTableService.getFinancingRounds(organizationId),\n        capTableService.getTransactions(organizationId),\n        capTableService.getPreferenceTerms(organizationId),\n        capTableService.getCapTableAtRound(organizationId)\n      ]);\n\n      setShareholders(shareholdersData);\n      setShareClasses(shareClassesData);\n      setRounds(roundsData);\n      setTransactions(transactionsData);\n      setPreferenceTerms(preferenceTermsData);\n      setCapTable(capTableData);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  // Load cap table at specific round\n  const loadCapTableAtRound = useCallback(async (roundId) => {\n    if (!organizationId) return;\n    try {\n      setLoading(true);\n      const data = await capTableService.getCapTableAtRound(organizationId, roundId);\n      setCapTable(data);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error loading cap table at round:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId]);\n\n  // Calculate exit scenario\n  const calculateExitScenario = useCallback(async (acquisitionAmount, acquisitionPercentage, preferenceType) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const result = await capTableService.calculateExitScenario(\n        organizationId,\n        acquisitionAmount,\n        acquisitionPercentage,\n        preferenceType\n      );\n      return result;\n    } catch (err) {\n      setError(err.message);\n      console.error('Error calculating exit scenario:', err);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for shareholders\n  const addShareholder = useCallback(async (shareholder) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newShareholder = await capTableService.createShareholder(shareholder, organizationId);\n      setShareholders(prev => [...prev, newShareholder]);\n      return newShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  const updateShareholder = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const updatedShareholder = await capTableService.updateShareholder(id, updates, organizationId);\n      setShareholders(prev => prev.map(sh => sh.id === id ? updatedShareholder : sh));\n      return updatedShareholder;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  const deleteShareholder = useCallback(async (id) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      await capTableService.deleteShareholder(id, organizationId);\n      setShareholders(prev => prev.filter(sh => sh.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD for Share Classes\n  const addShareClass = useCallback(async (shareClassData) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newShareClass = await capTableService.createShareClass(shareClassData, organizationId);\n      setShareClasses(prev => [...prev, newShareClass].sort((a,b) => a.name.localeCompare(b.name)));\n      return newShareClass;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for rounds\n  const addRound = useCallback(async (roundData, participants) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const newRound = await capTableService.createFinancingRound(roundData, participants, organizationId);\n      setRounds(prev => [newRound.round, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date)));\n      setTransactions(prev => [...prev, ...newRound.transactions]);\n      const shareholdersData = await capTableService.getShareholders(organizationId);\n      setShareholders(shareholdersData);\n      return newRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  const updateRound = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      const updatedRound = await capTableService.updateFinancingRound(id, updates, organizationId);\n      setRounds(prev => prev.map(r => r.id === id ? updatedRound : r));\n      return updatedRound;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  const deleteRound = useCallback(async (id) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    try {\n      await capTableService.deleteFinancingRound(id, organizationId);\n      setRounds(prev => prev.filter(r => r.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [organizationId]);\n\n  // CRUD operations for transactions\n  const addTransaction = useCallback(async (transaction) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    const newTransaction = await capTableService.createTransaction(transaction, organizationId);\n    await loadData(); // Reload all data for simplicity\n    return newTransaction;\n  }, [organizationId, loadData]);\n\n  const updateTransaction = useCallback(async (id, updates) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    const updatedTransaction = await capTableService.updateTransaction(id, updates, organizationId);\n    await loadData(); // Reload all data\n    return updatedTransaction;\n  }, [organizationId, loadData]);\n\n  const deleteTransaction = useCallback(async (id) => {\n    if (!organizationId) throw new Error(\"No organization selected\");\n    await capTableService.deleteTransaction(id, organizationId);\n    await loadData(); // Reload all data\n  }, [organizationId, loadData]);\n\n  // CRUD operations for preference terms\n  const addPreferenceTerm = useCallback(async (term) => {\n    try {\n      const newTerm = await capTableService.createPreferenceTerm(term);\n      setPreferenceTerms(prev => [...prev, newTerm]);\n      return newTerm;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, []);\n\n  return {\n    // State\n    loading,\n    error,\n    capTable,\n    rounds,\n    shareholders,\n    shareClasses,\n    transactions,\n    preferenceTerms,\n    \n    // Actions\n    loadData,\n    loadCapTableAtRound,\n    calculateExitScenario,\n    \n    // Shareholder operations\n    addShareholder,\n    updateShareholder,\n    deleteShareholder,\n    \n    // Share Class operations\n    addShareClass,\n    \n    // Round operations\n    addRound,\n    updateRound,\n    deleteRound,\n    \n    // Transaction operations\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    \n    // Preference term operations\n    addPreferenceTerm,\n    \n    // Utility\n    clearError: () => setError(null)\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}