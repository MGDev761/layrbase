{"ast":null,"code":"var _jsxFileName = \"/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_organizations');\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({\n    email,\n    password,\n    firstName,\n    lastName\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName\n          }\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({\n    email,\n    password\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async organizationData => {\n    try {\n      // Map form data to database schema\n      const orgData = {\n        name: organizationData.name,\n        slug: organizationData.slug,\n        description: organizationData.description,\n        industry: organizationData.industry,\n        website: organizationData.website\n      };\n\n      // Create organization\n      const {\n        data: org,\n        error: orgError\n      } = await supabase.from('organizations').insert([orgData]).select().single();\n      if (orgError) throw orgError;\n\n      // Add user as owner\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: org.id,\n        role: 'owner'\n      }]);\n      if (userOrgError) throw userOrgError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      setCurrentOrganization(org);\n      return {\n        data: org,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async invitationToken => {\n    try {\n      // Get invitation details\n      const {\n        data: invitation,\n        error: inviteError\n      } = await supabase.from('organization_invitations').select('*').eq('token', invitationToken).eq('accepted_at', null).gt('expires_at', new Date().toISOString()).single();\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: invitation.organization_id,\n        role: invitation.role\n      }]);\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const {\n        error: updateError\n      } = await supabase.from('organization_invitations').update({\n        accepted_at: new Date().toISOString()\n      }).eq('id', invitation.id);\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      return {\n        data: invitation,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async updates => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) throw error;\n      setUserProfile(data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('has_permission', {\n        org_id: organizationId,\n        required_role: requiredRole\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Get current session\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (session !== null && session !== void 0 && session.user) {\n          setUser(session.user);\n\n          // Get user profile\n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n\n          // Get user organizations\n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n\n          // Set first organization as current (or demo org)\n          if (userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session !== null && session !== void 0 && session.user) {\n        setUser(session.user);\n        const profile = await getUserProfile(session.user.id);\n        setUserProfile(profile);\n        const userOrgs = await getUserOrganizations();\n        setOrganizations(userOrgs);\n        if (userOrgs.length > 0) {\n          setCurrentOrganization(userOrgs[0]);\n        }\n      } else {\n        setUser(null);\n        setUserProfile(null);\n        setOrganizations([]);\n        setCurrentOrganization(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"nLehpgXAMqJx2WzZ4IHjtLLS0Fo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","userProfile","setUserProfile","organizations","setOrganizations","currentOrganization","setCurrentOrganization","loading","setLoading","getUserProfile","userId","data","error","from","select","eq","single","console","getUserOrganizations","rpc","signUp","email","password","firstName","lastName","auth","options","first_name","last_name","signIn","signInWithPassword","signOut","createOrganization","organizationData","orgData","name","slug","description","industry","website","org","orgError","insert","userOrgError","user_id","id","organization_id","role","userOrgs","joinOrganization","invitationToken","invitation","inviteError","gt","Date","toISOString","updateError","update","accepted_at","updateUserProfile","updates","hasPermission","organizationId","requiredRole","org_id","required_role","initializeAuth","session","getSession","profile","length","subscription","onAuthStateChange","event","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async (userId) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const { data, error } = await supabase\n        .rpc('get_user_organizations');\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({ email, password, firstName, lastName }) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          },\n        },\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({ email, password }) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async (organizationData) => {\n    try {\n      // Map form data to database schema\n      const orgData = {\n        name: organizationData.name,\n        slug: organizationData.slug,\n        description: organizationData.description,\n        industry: organizationData.industry,\n        website: organizationData.website\n      };\n\n      // Create organization\n      const { data: org, error: orgError } = await supabase\n        .from('organizations')\n        .insert([orgData])\n        .select()\n        .single();\n\n      if (orgError) throw orgError;\n\n      // Add user as owner\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: org.id,\n          role: 'owner',\n        }]);\n\n      if (userOrgError) throw userOrgError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      setCurrentOrganization(org);\n\n      return { data: org, error: null };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return { data: null, error };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async (invitationToken) => {\n    try {\n      // Get invitation details\n      const { data: invitation, error: inviteError } = await supabase\n        .from('organization_invitations')\n        .select('*')\n        .eq('token', invitationToken)\n        .eq('accepted_at', null)\n        .gt('expires_at', new Date().toISOString())\n        .single();\n\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: invitation.organization_id,\n          role: invitation.role,\n        }]);\n\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const { error: updateError } = await supabase\n        .from('organization_invitations')\n        .update({ accepted_at: new Date().toISOString() })\n        .eq('id', invitation.id);\n\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      return { data: invitation, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      setUserProfile(data);\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const { data, error } = await supabase\n        .rpc('has_permission', {\n          org_id: organizationId,\n          required_role: requiredRole,\n        });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Get current session\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session?.user) {\n          setUser(session.user);\n          \n          // Get user profile\n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n          \n          // Get user organizations\n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          \n          // Set first organization as current (or demo org)\n          if (userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (session?.user) {\n          setUser(session.user);\n          \n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n          \n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          \n          if (userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n          }\n        } else {\n          setUser(null);\n          setUserProfile(null);\n          setOrganizations([]);\n          setCurrentOrganization(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}