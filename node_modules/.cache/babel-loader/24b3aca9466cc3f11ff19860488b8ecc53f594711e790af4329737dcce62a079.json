{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Template operations\nexport const getTemplates = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_templates').select('*').eq('is_active', true).order('name');\n  if (error) throw error;\n  return data;\n};\nexport const getTemplateById = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_templates').select('*').eq('id', id).single();\n  if (error) throw error;\n  return data;\n};\n\n// Contract operations\nexport const getContracts = async organizationId => {\n  if (!organizationId) return [];\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contracts').select('*').eq('organization_id', organizationId).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error(\"Error fetching contracts:\", error);\n    throw error;\n  }\n  return data;\n};\nexport const createContractFromTemplate = async (templateId, contractData) => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('create_contract_from_template', {\n    p_template_id: templateId,\n    p_name: contractData.name,\n    p_contract_data: contractData.data,\n    p_description: contractData.description,\n    p_folder_id: contractData.folderId,\n    p_effective_date: contractData.effectiveDate,\n    p_expiry_date: contractData.expiryDate,\n    p_organization_id: contractData.organizationId\n  });\n  if (error) throw error;\n  return data;\n};\nexport const createContract = async (contractData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n  const {\n    data,\n    error\n  } = await supabase.rpc('create_contract_direct', {\n    p_name: contractData.name,\n    p_organization_id: organizationId,\n    p_description: contractData.description,\n    p_folder_id: contractData.folder_id\n  });\n  if (error) {\n    console.error('[legalService.createContract] RLS error:', error);\n    throw error;\n  }\n\n  // RPCs can return a single object or an array with one object. Normalize it.\n  const newContract = Array.isArray(data) ? data[0] : data;\n  return newContract;\n};\nexport const updateContract = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contracts').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteContract = async id => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('delete_contract', {\n    p_contract_id: id\n  });\n  if (error) {\n    console.error(\"Error calling delete_contract RPC:\", error);\n    throw error;\n  }\n  if (data && data.status === 'error') {\n    throw new Error(data.message);\n  }\n};\nexport const duplicateContract = async contractId => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('duplicate_contract', {\n    p_contract_id: contractId\n  });\n  if (error) throw error;\n  return data;\n};\n\n// Contract folder operations\nexport const getContractFolders = async organizationId => {\n  if (!organizationId) throw new Error(\"No organization selected.\");\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contract_folders').select('*').eq('organization_id', organizationId).order('name');\n  if (error) throw error;\n  return data;\n};\nexport const createContractFolder = async (folderData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n  const {\n    data,\n    error\n  } = await supabase.from('legal_contract_folders').insert({\n    ...folderData,\n    organization_id: organizationId\n  }).select().single();\n  if (error) throw error;\n  return data;\n};\n\n// Compliance deadline operations\nexport const getComplianceDeadlines = async () => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('get_organization_compliance_deadlines');\n  if (error) throw error;\n  return data;\n};\nexport const createComplianceDeadline = async deadlineData => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_compliance_deadlines').insert(deadlineData).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const updateComplianceDeadline = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_compliance_deadlines').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteComplianceDeadline = async id => {\n  const {\n    error\n  } = await supabase.from('legal_compliance_deadlines').delete().eq('id', id);\n  if (error) throw error;\n};\n\n// Insurance policy operations\nexport const getInsurancePolicies = async () => {\n  const {\n    data,\n    error\n  } = await supabase.rpc('get_organization_insurance_policies');\n  if (error) throw error;\n  return data;\n};\nexport const createInsurancePolicy = async policyData => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_insurance_policies').insert(policyData).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const updateInsurancePolicy = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('legal_insurance_policies').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const deleteInsurancePolicy = async id => {\n  const {\n    error\n  } = await supabase.from('legal_insurance_policies').delete().eq('id', id);\n  if (error) throw error;\n};\n\n// File upload operations\nexport const uploadContractPDF = async (file, contractId, organizationId) => {\n  if (!organizationId) {\n    console.error(\"uploadContractPDF: Missing organizationId\");\n    throw new Error(\"Cannot upload file: organization ID is missing.\");\n  }\n  const fileName = `${organizationId}/contracts/${contractId}/${file.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('legal-documents').upload(fileName, file);\n  if (error) throw error;\n\n  // Get the public URL\n  const {\n    data: urlData\n  } = supabase.storage.from('legal-documents').getPublicUrl(fileName);\n\n  // Update the contract with the PDF path\n  await updateContract(contractId, {\n    pdf_file_path: urlData.publicUrl\n  });\n  return urlData.publicUrl;\n};\nexport const deleteContractFile = async filePath => {\n  // filePath is the full public URL. We need to extract the object path for the remove function.\n  // Example URL: https://<ref>.supabase.co/storage/v1/object/public/legal-documents/path/to/file.pdf\n  // We need: path/to/file.pdf\n  const path = new URL(filePath).pathname.split('/legal-documents/')[1];\n  if (!path) {\n    console.error(\"Could not determine file path from URL:\", filePath);\n    return; // Don't throw, just log the error and skip deletion\n  }\n  const {\n    error\n  } = await supabase.storage.from('legal-documents').remove([path]);\n  if (error) {\n    console.error(\"Error deleting contract file:\", error);\n    // Don't re-throw, as we want to proceed with deleting the DB record even if file deletion fails\n  }\n};\nexport const uploadPolicyDocument = async (file, policyId) => {\n  const fileName = `policies/${policyId}/${file.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('legal-documents').upload(fileName, file);\n  if (error) throw error;\n\n  // Get the public URL\n  const {\n    data: urlData\n  } = supabase.storage.from('legal-documents').getPublicUrl(fileName);\n\n  // Update the policy with the document path\n  await updateInsurancePolicy(policyId, {\n    policy_document_path: urlData.publicUrl\n  });\n  return urlData.publicUrl;\n};\n\n// Utility functions\nexport const generateContractPDF = async (contractData, template) => {\n  try {\n    // Import jsPDF dynamically to avoid SSR issues\n    const {\n      default: jsPDF\n    } = await import('jspdf');\n\n    // Create a new PDF document\n    const pdf = new jsPDF();\n\n    // Set font and size\n    pdf.setFont('helvetica');\n    pdf.setFontSize(16);\n\n    // Add title\n    pdf.text(contractData.name, 20, 20);\n\n    // Add template content with replaced placeholders\n    let content = template.template_content || '';\n\n    // Replace placeholders with actual data\n    Object.entries(contractData.data || {}).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`;\n      content = content.replace(new RegExp(placeholder, 'g'), value || '');\n    });\n\n    // Add content to PDF\n    pdf.setFontSize(12);\n    const splitText = pdf.splitTextToSize(content, 170); // 170 is the width\n    pdf.text(splitText, 20, 40);\n\n    // Convert to blob\n    const pdfBlob = pdf.output('blob');\n\n    // Create a File object from the blob\n    const fileName = `${contractData.name.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`;\n    const pdfFile = new File([pdfBlob], fileName, {\n      type: 'application/pdf'\n    });\n    return pdfFile;\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    throw new Error('Failed to generate PDF');\n  }\n};\nexport const saveGeneratedPDF = async (pdfFile, contractId, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"Cannot save PDF: organization ID is missing.\");\n  }\n  const fileName = `${organizationId}/contracts/${contractId}/${pdfFile.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('legal-documents').upload(fileName, pdfFile);\n  if (error) throw error;\n\n  // Get the public URL\n  const {\n    data: urlData\n  } = supabase.storage.from('legal-documents').getPublicUrl(fileName);\n\n  // Update the contract with the PDF path\n  await updateContract(contractId, {\n    pdf_file_path: urlData.publicUrl\n  });\n  return urlData.publicUrl;\n};\nexport const debugRls = async organizationId => {\n  if (!organizationId) {\n    alert('DEBUG: No org ID passed to debugRls');\n    return null;\n  }\n  const {\n    data,\n    error\n  } = await supabase.rpc('debug_get_rls_context', {\n    p_org_id: organizationId\n  });\n  if (error) {\n    alert(`DEBUG: Error calling debug function: ${error.message}`);\n    return null;\n  }\n  return data[0];\n};","map":{"version":3,"names":["supabase","getTemplates","data","error","from","select","eq","order","getTemplateById","id","single","getContracts","organizationId","ascending","console","createContractFromTemplate","templateId","contractData","rpc","p_template_id","p_name","name","p_contract_data","p_description","description","p_folder_id","folderId","p_effective_date","effectiveDate","p_expiry_date","expiryDate","p_organization_id","createContract","Error","folder_id","newContract","Array","isArray","updateContract","updates","update","deleteContract","p_contract_id","status","message","duplicateContract","contractId","getContractFolders","createContractFolder","folderData","insert","organization_id","getComplianceDeadlines","createComplianceDeadline","deadlineData","updateComplianceDeadline","deleteComplianceDeadline","delete","getInsurancePolicies","createInsurancePolicy","policyData","updateInsurancePolicy","deleteInsurancePolicy","uploadContractPDF","file","fileName","storage","upload","urlData","getPublicUrl","pdf_file_path","publicUrl","deleteContractFile","filePath","path","URL","pathname","split","remove","uploadPolicyDocument","policyId","policy_document_path","generateContractPDF","template","default","jsPDF","pdf","setFont","setFontSize","text","content","template_content","Object","entries","forEach","key","value","placeholder","replace","RegExp","splitText","splitTextToSize","pdfBlob","output","Date","now","pdfFile","File","type","saveGeneratedPDF","debugRls","alert","p_org_id"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/legalService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Template operations\nexport const getTemplates = async () => {\n  const { data, error } = await supabase\n    .from('legal_templates')\n    .select('*')\n    .eq('is_active', true)\n    .order('name');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const getTemplateById = async (id) => {\n  const { data, error } = await supabase\n    .from('legal_templates')\n    .select('*')\n    .eq('id', id)\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\n// Contract operations\nexport const getContracts = async (organizationId) => {\n  if (!organizationId) return [];\n\n  const { data, error } = await supabase\n    .from('legal_contracts')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .order('created_at', { ascending: false });\n  \n  if (error) {\n    console.error(\"Error fetching contracts:\", error);\n    throw error;\n  }\n  return data;\n};\n\nexport const createContractFromTemplate = async (templateId, contractData) => {\n  const { data, error } = await supabase\n    .rpc('create_contract_from_template', {\n      p_template_id: templateId,\n      p_name: contractData.name,\n      p_contract_data: contractData.data,\n      p_description: contractData.description,\n      p_folder_id: contractData.folderId,\n      p_effective_date: contractData.effectiveDate,\n      p_expiry_date: contractData.expiryDate,\n      p_organization_id: contractData.organizationId\n    });\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createContract = async (contractData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n\n  const { data, error } = await supabase\n    .rpc('create_contract_direct', {\n      p_name: contractData.name,\n      p_organization_id: organizationId,\n      p_description: contractData.description,\n      p_folder_id: contractData.folder_id\n    });\n  \n  if (error) {\n    console.error('[legalService.createContract] RLS error:', error);\n    throw error;\n  }\n  \n  // RPCs can return a single object or an array with one object. Normalize it.\n  const newContract = Array.isArray(data) ? data[0] : data;\n  return newContract;\n};\n\nexport const updateContract = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_contracts')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteContract = async (id) => {\n  const { data, error } = await supabase\n    .rpc('delete_contract', { p_contract_id: id });\n  \n  if (error) {\n    console.error(\"Error calling delete_contract RPC:\", error);\n    throw error;\n  }\n\n  if (data && data.status === 'error') {\n    throw new Error(data.message);\n  }\n};\n\nexport const duplicateContract = async (contractId) => {\n  const { data, error } = await supabase\n    .rpc('duplicate_contract', { p_contract_id: contractId });\n\n  if (error) throw error;\n  return data;\n};\n\n// Contract folder operations\nexport const getContractFolders = async (organizationId) => {\n  if (!organizationId) throw new Error(\"No organization selected.\");\n  const { data, error } = await supabase\n    .from('legal_contract_folders')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .order('name');\n  if (error) throw error;\n  return data;\n};\n\nexport const createContractFolder = async (folderData, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"User is not associated with an organization.\");\n  }\n\n  const { data, error } = await supabase\n    .from('legal_contract_folders')\n    .insert({ ...folderData, organization_id: organizationId })\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\n// Compliance deadline operations\nexport const getComplianceDeadlines = async () => {\n  const { data, error } = await supabase\n    .rpc('get_organization_compliance_deadlines');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createComplianceDeadline = async (deadlineData) => {\n  const { data, error } = await supabase\n    .from('legal_compliance_deadlines')\n    .insert(deadlineData)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const updateComplianceDeadline = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_compliance_deadlines')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteComplianceDeadline = async (id) => {\n  const { error } = await supabase\n    .from('legal_compliance_deadlines')\n    .delete()\n    .eq('id', id);\n  \n  if (error) throw error;\n};\n\n// Insurance policy operations\nexport const getInsurancePolicies = async () => {\n  const { data, error } = await supabase\n    .rpc('get_organization_insurance_policies');\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const createInsurancePolicy = async (policyData) => {\n  const { data, error } = await supabase\n    .from('legal_insurance_policies')\n    .insert(policyData)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const updateInsurancePolicy = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('legal_insurance_policies')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  \n  if (error) throw error;\n  return data;\n};\n\nexport const deleteInsurancePolicy = async (id) => {\n  const { error } = await supabase\n    .from('legal_insurance_policies')\n    .delete()\n    .eq('id', id);\n  \n  if (error) throw error;\n};\n\n// File upload operations\nexport const uploadContractPDF = async (file, contractId, organizationId) => {\n  if (!organizationId) {\n    console.error(\"uploadContractPDF: Missing organizationId\");\n    throw new Error(\"Cannot upload file: organization ID is missing.\");\n  }\n  const fileName = `${organizationId}/contracts/${contractId}/${file.name}`;\n  \n  const { data, error } = await supabase.storage\n    .from('legal-documents')\n    .upload(fileName, file);\n  \n  if (error) throw error;\n  \n  // Get the public URL\n  const { data: urlData } = supabase.storage\n    .from('legal-documents')\n    .getPublicUrl(fileName);\n  \n  // Update the contract with the PDF path\n  await updateContract(contractId, { pdf_file_path: urlData.publicUrl });\n  \n  return urlData.publicUrl;\n};\n\nexport const deleteContractFile = async (filePath) => {\n  // filePath is the full public URL. We need to extract the object path for the remove function.\n  // Example URL: https://<ref>.supabase.co/storage/v1/object/public/legal-documents/path/to/file.pdf\n  // We need: path/to/file.pdf\n  const path = new URL(filePath).pathname.split('/legal-documents/')[1];\n  \n  if (!path) {\n    console.error(\"Could not determine file path from URL:\", filePath);\n    return; // Don't throw, just log the error and skip deletion\n  }\n\n  const { error } = await supabase.storage\n    .from('legal-documents')\n    .remove([path]);\n  \n  if (error) {\n    console.error(\"Error deleting contract file:\", error);\n    // Don't re-throw, as we want to proceed with deleting the DB record even if file deletion fails\n  }\n};\n\nexport const uploadPolicyDocument = async (file, policyId) => {\n  const fileName = `policies/${policyId}/${file.name}`;\n  \n  const { data, error } = await supabase.storage\n    .from('legal-documents')\n    .upload(fileName, file);\n  \n  if (error) throw error;\n  \n  // Get the public URL\n  const { data: urlData } = supabase.storage\n    .from('legal-documents')\n    .getPublicUrl(fileName);\n  \n  // Update the policy with the document path\n  await updateInsurancePolicy(policyId, { policy_document_path: urlData.publicUrl });\n  \n  return urlData.publicUrl;\n};\n\n// Utility functions\nexport const generateContractPDF = async (contractData, template) => {\n  try {\n    // Import jsPDF dynamically to avoid SSR issues\n    const { default: jsPDF } = await import('jspdf');\n    \n    // Create a new PDF document\n    const pdf = new jsPDF();\n    \n    // Set font and size\n    pdf.setFont('helvetica');\n    pdf.setFontSize(16);\n    \n    // Add title\n    pdf.text(contractData.name, 20, 20);\n    \n    // Add template content with replaced placeholders\n    let content = template.template_content || '';\n    \n    // Replace placeholders with actual data\n    Object.entries(contractData.data || {}).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`;\n      content = content.replace(new RegExp(placeholder, 'g'), value || '');\n    });\n    \n    // Add content to PDF\n    pdf.setFontSize(12);\n    const splitText = pdf.splitTextToSize(content, 170); // 170 is the width\n    pdf.text(splitText, 20, 40);\n    \n    // Convert to blob\n    const pdfBlob = pdf.output('blob');\n    \n    // Create a File object from the blob\n    const fileName = `${contractData.name.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`;\n    const pdfFile = new File([pdfBlob], fileName, { type: 'application/pdf' });\n    \n    return pdfFile;\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    throw new Error('Failed to generate PDF');\n  }\n};\n\nexport const saveGeneratedPDF = async (pdfFile, contractId, organizationId) => {\n  if (!organizationId) {\n    throw new Error(\"Cannot save PDF: organization ID is missing.\");\n  }\n  \n  const fileName = `${organizationId}/contracts/${contractId}/${pdfFile.name}`;\n  \n  const { data, error } = await supabase.storage\n    .from('legal-documents')\n    .upload(fileName, pdfFile);\n  \n  if (error) throw error;\n  \n  // Get the public URL\n  const { data: urlData } = supabase.storage\n    .from('legal-documents')\n    .getPublicUrl(fileName);\n  \n  // Update the contract with the PDF path\n  await updateContract(contractId, { pdf_file_path: urlData.publicUrl });\n  \n  return urlData.publicUrl;\n};\n\nexport const debugRls = async (organizationId) => {\n  if (!organizationId) {\n    alert('DEBUG: No org ID passed to debugRls');\n    return null;\n  }\n  const { data, error } = await supabase.rpc('debug_get_rls_context', {\n    p_org_id: organizationId,\n  });\n\n  if (error) {\n    alert(`DEBUG: Error calling debug function: ${error.message}`);\n    return null;\n  }\n\n  return data[0];\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}