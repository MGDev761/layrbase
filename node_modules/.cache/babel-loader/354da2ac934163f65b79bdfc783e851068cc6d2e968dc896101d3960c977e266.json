{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Fetch all policies for an organization\nexport async function fetchPolicies(organization_id) {\n  const {\n    data,\n    error\n  } = await supabase.from('policies').select('*').eq('organization_id', organization_id).order('name');\n  if (error) throw error;\n  return data;\n}\n\n// Add a new policy\nexport async function addPolicy(policy) {\n  const {\n    data,\n    error\n  } = await supabase.from('policies').insert([policy]).select().single();\n  if (error) throw error;\n  return data;\n}\n\n// Update a policy\nexport async function updatePolicy(id, updates) {\n  const {\n    data,\n    error\n  } = await supabase.from('policies').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n}\n\n// Delete a policy\nexport async function deletePolicy(id) {\n  const {\n    error\n  } = await supabase.from('policies').delete().eq('id', id);\n  if (error) throw error;\n}\n\n// Upload a file to Supabase Storage and return the public URL\nexport async function uploadPolicyFile(file, organization_id) {\n  const filePath = `policies/${organization_id}/${Date.now()}_${file.name}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from('public').upload(filePath, file);\n  if (error) throw error;\n  const {\n    publicUrl\n  } = supabase.storage.from('public').getPublicUrl(filePath).data;\n  return publicUrl;\n}","map":{"version":3,"names":["supabase","fetchPolicies","organization_id","data","error","from","select","eq","order","addPolicy","policy","insert","single","updatePolicy","id","updates","update","deletePolicy","delete","uploadPolicyFile","file","filePath","Date","now","name","storage","upload","publicUrl","getPublicUrl"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/policiesService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Fetch all policies for an organization\nexport async function fetchPolicies(organization_id) {\n  const { data, error } = await supabase\n    .from('policies')\n    .select('*')\n    .eq('organization_id', organization_id)\n    .order('name');\n  if (error) throw error;\n  return data;\n}\n\n// Add a new policy\nexport async function addPolicy(policy) {\n  const { data, error } = await supabase\n    .from('policies')\n    .insert([policy])\n    .select()\n    .single();\n  if (error) throw error;\n  return data;\n}\n\n// Update a policy\nexport async function updatePolicy(id, updates) {\n  const { data, error } = await supabase\n    .from('policies')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  if (error) throw error;\n  return data;\n}\n\n// Delete a policy\nexport async function deletePolicy(id) {\n  const { error } = await supabase\n    .from('policies')\n    .delete()\n    .eq('id', id);\n  if (error) throw error;\n}\n\n// Upload a file to Supabase Storage and return the public URL\nexport async function uploadPolicyFile(file, organization_id) {\n  const filePath = `policies/${organization_id}/${Date.now()}_${file.name}`;\n  const { data, error } = await supabase.storage.from('public').upload(filePath, file);\n  if (error) throw error;\n  const { publicUrl } = supabase.storage.from('public').getPublicUrl(filePath).data;\n  return publicUrl;\n} "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;;AAE1C;AACA,OAAO,eAAeC,aAAaA,CAACC,eAAe,EAAE;EACnD,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,iBAAiB,EAAEL,eAAe,CAAC,CACtCM,KAAK,CAAC,MAAM,CAAC;EAChB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAeM,SAASA,CAACC,MAAM,EAAE;EACtC,MAAM;IAAEP,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,UAAU,CAAC,CAChBM,MAAM,CAAC,CAACD,MAAM,CAAC,CAAC,CAChBJ,MAAM,CAAC,CAAC,CACRM,MAAM,CAAC,CAAC;EACX,IAAIR,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAeU,YAAYA,CAACC,EAAE,EAAEC,OAAO,EAAE;EAC9C,MAAM;IAAEZ,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,UAAU,CAAC,CAChBW,MAAM,CAACD,OAAO,CAAC,CACfR,EAAE,CAAC,IAAI,EAAEO,EAAE,CAAC,CACZR,MAAM,CAAC,CAAC,CACRM,MAAM,CAAC,CAAC;EACX,IAAIR,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAec,YAAYA,CAACH,EAAE,EAAE;EACrC,MAAM;IAAEV;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAAC,UAAU,CAAC,CAChBa,MAAM,CAAC,CAAC,CACRX,EAAE,CAAC,IAAI,EAAEO,EAAE,CAAC;EACf,IAAIV,KAAK,EAAE,MAAMA,KAAK;AACxB;;AAEA;AACA,OAAO,eAAee,gBAAgBA,CAACC,IAAI,EAAElB,eAAe,EAAE;EAC5D,MAAMmB,QAAQ,GAAG,YAAYnB,eAAe,IAAIoB,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIH,IAAI,CAACI,IAAI,EAAE;EACzE,MAAM;IAAErB,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACyB,OAAO,CAACpB,IAAI,CAAC,QAAQ,CAAC,CAACqB,MAAM,CAACL,QAAQ,EAAED,IAAI,CAAC;EACpF,IAAIhB,KAAK,EAAE,MAAMA,KAAK;EACtB,MAAM;IAAEuB;EAAU,CAAC,GAAG3B,QAAQ,CAACyB,OAAO,CAACpB,IAAI,CAAC,QAAQ,CAAC,CAACuB,YAAY,CAACP,QAAQ,CAAC,CAAClB,IAAI;EACjF,OAAOwB,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}