{"ast":null,"code":"var _jsxFileName = \"/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst withTimeout = (promise, ms) => {\n  const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error(`Request timed out after ${ms} ms`)), ms));\n  return Promise.race([promise, timeout]);\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Get user profile\n  const getUserProfile = async userId => {\n    try {\n      const profilePromise = supabase.from('user_profiles').select('*').eq('id', userId).single();\n      const {\n        data,\n        error\n      } = await withTimeout(profilePromise, 15000);\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const rpcPromise = supabase.rpc('get_user_organizations');\n      const {\n        data,\n        error\n      } = await withTimeout(rpcPromise, 15000);\n      if (error) {\n        var _await$supabase$auth$;\n        console.error('Error calling get_user_organizations RPC:', error);\n\n        // Fallback: direct query if RPC function doesn't exist\n        console.log('Trying fallback query for user organizations...');\n        const fallbackPromise = supabase.from('user_organizations').select(`\n            organization_id,\n            role,\n            is_active,\n            organizations (\n              id,\n              name,\n              slug\n            )\n          `).eq('user_id', (_await$supabase$auth$ = (await supabase.auth.getUser()).data.user) === null || _await$supabase$auth$ === void 0 ? void 0 : _await$supabase$auth$.id).eq('is_active', true);\n        const {\n          data: fallbackData,\n          error: fallbackError\n        } = await withTimeout(fallbackPromise, 15000);\n        if (fallbackError) {\n          console.error('Fallback query also failed:', fallbackError);\n          return [];\n        }\n\n        // Transform fallback data to match expected format\n        return fallbackData.map(item => {\n          var _item$organizations, _item$organizations2;\n          return {\n            organization_id: item.organization_id,\n            organization_name: (_item$organizations = item.organizations) === null || _item$organizations === void 0 ? void 0 : _item$organizations.name,\n            organization_slug: (_item$organizations2 = item.organizations) === null || _item$organizations2 === void 0 ? void 0 : _item$organizations2.slug,\n            role: item.role,\n            is_active: item.is_active\n          };\n        });\n      }\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      throw error;\n    }\n  };\n\n  // Sign up\n  const signUp = async ({\n    email,\n    password,\n    firstName,\n    lastName\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName\n          }\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({\n    email,\n    password\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async organizationData => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n\n      // Use the database function to create organization and add user as owner\n      const rpcPromise = supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n      const {\n        data,\n        error\n      } = await withTimeout(rpcPromise, 8000);\n      console.log('RPC call result:', {\n        data,\n        error\n      });\n      if (error) {\n        console.error('Database error creating organization:', error);\n        if (error.message.includes('function') || error.message.includes('does not exist') || error.message.includes('timed out')) {\n          console.log('RPC function failed or timed out, trying manual approach...');\n          return await createOrganizationManual(organizationData);\n        }\n        throw error;\n      }\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n      return {\n        data: (data === null || data === void 0 ? void 0 : data[0]) || null,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Manual organization creation fallback\n  const createOrganizationManual = async organizationData => {\n    try {\n      console.log('Creating organization manually...');\n\n      // Create organization\n      const {\n        data: org,\n        error: orgError\n      } = await supabase.from('organizations').insert([{\n        name: organizationData.name,\n        slug: organizationData.slug,\n        description: organizationData.description,\n        industry: organizationData.industry,\n        website: organizationData.website\n      }]).select().single();\n      console.log('Organization insert result:', {\n        org,\n        orgError\n      });\n      if (orgError) {\n        console.error('Error inserting organization:', orgError);\n        throw orgError;\n      }\n\n      // Add user as owner\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: org.id,\n        role: 'owner'\n      }]);\n      console.log('User organization insert result:', {\n        userOrgError\n      });\n      if (userOrgError) {\n        console.error('Error inserting user organization:', userOrgError);\n        throw userOrgError;\n      }\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      // Set the new organization as current\n      setCurrentOrganization({\n        organization_id: org.id,\n        organization_name: org.name,\n        organization_slug: org.slug,\n        role: 'owner'\n      });\n      return {\n        data: org,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error in manual organization creation:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async invitationToken => {\n    try {\n      // Get invitation details\n      const {\n        data: invitation,\n        error: inviteError\n      } = await supabase.from('organization_invitations').select('*').eq('token', invitationToken).eq('accepted_at', null).gt('expires_at', new Date().toISOString()).single();\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: invitation.organization_id,\n        role: invitation.role\n      }]);\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const {\n        error: updateError\n      } = await supabase.from('organization_invitations').update({\n        accepted_at: new Date().toISOString()\n      }).eq('id', invitation.id);\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      return {\n        data: invitation,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async updates => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) throw error;\n      setUserProfile(data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('has_permission', {\n        org_id: organizationId,\n        required_role: requiredRole\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    let isMounted = true;\n    const initializeAuth = async () => {\n      if (!isMounted) return;\n      try {\n        setAuthError(null);\n        console.log('Initializing auth...');\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (session !== null && session !== void 0 && session.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n          console.log('User profile loaded');\n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          console.log('User organizations loaded');\n          if (userOrgs && userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n            console.log('Set current organization');\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error during auth initialization:', error);\n        if (isMounted) setAuthError(error);\n      } finally {\n        if (isMounted) {\n          console.log('Auth initialization complete');\n          setLoading(false);\n        }\n      }\n    };\n    initializeAuth();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization,\n    authError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"D5ip5h7JGbqjveWbacA6PfXKkZE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","withTimeout","promise","ms","timeout","Promise","_","reject","setTimeout","race","AuthProvider","children","_s2","user","setUser","userProfile","setUserProfile","organizations","setOrganizations","currentOrganization","setCurrentOrganization","loading","setLoading","authError","setAuthError","getUserProfile","userId","profilePromise","from","select","eq","single","data","error","console","getUserOrganizations","rpcPromise","rpc","_await$supabase$auth$","log","fallbackPromise","auth","getUser","id","fallbackData","fallbackError","map","item","_item$organizations","_item$organizations2","organization_id","organization_name","name","organization_slug","slug","role","is_active","signUp","email","password","firstName","lastName","options","first_name","last_name","signIn","signInWithPassword","signOut","createOrganization","organizationData","org_name","org_slug","org_description","description","org_industry","industry","org_website","website","message","includes","createOrganizationManual","userOrgs","length","newOrg","org","orgError","insert","userOrgError","user_id","joinOrganization","invitationToken","invitation","inviteError","gt","Date","toISOString","updateError","update","accepted_at","updateUserProfile","updates","hasPermission","organizationId","requiredRole","org_id","required_role","isMounted","initializeAuth","session","getSession","profile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nconst withTimeout = (promise, ms) => {\n  const timeout = new Promise((_, reject) =>\n    setTimeout(() => reject(new Error(`Request timed out after ${ms} ms`)), ms)\n  );\n  return Promise.race([promise, timeout]);\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Get user profile\n  const getUserProfile = async (userId) => {\n    try {\n      const profilePromise = supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n      \n      const { data, error } = await withTimeout(profilePromise, 15000);\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const rpcPromise = supabase.rpc('get_user_organizations');\n      const { data, error } = await withTimeout(rpcPromise, 15000);\n\n      if (error) {\n        console.error('Error calling get_user_organizations RPC:', error);\n        \n        // Fallback: direct query if RPC function doesn't exist\n        console.log('Trying fallback query for user organizations...');\n        const fallbackPromise = supabase\n          .from('user_organizations')\n          .select(`\n            organization_id,\n            role,\n            is_active,\n            organizations (\n              id,\n              name,\n              slug\n            )\n          `)\n          .eq('user_id', (await supabase.auth.getUser()).data.user?.id)\n          .eq('is_active', true);\n        \n        const { data: fallbackData, error: fallbackError } = await withTimeout(fallbackPromise, 15000);\n\n        if (fallbackError) {\n          console.error('Fallback query also failed:', fallbackError);\n          return [];\n        }\n\n        // Transform fallback data to match expected format\n        return fallbackData.map(item => ({\n          organization_id: item.organization_id,\n          organization_name: item.organizations?.name,\n          organization_slug: item.organizations?.slug,\n          role: item.role,\n          is_active: item.is_active\n        }));\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      throw error;\n    }\n  };\n\n  // Sign up\n  const signUp = async ({ email, password, firstName, lastName }) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          },\n        },\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({ email, password }) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async (organizationData) => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n      \n      // Use the database function to create organization and add user as owner\n      const rpcPromise = supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n      \n      const { data, error } = await withTimeout(rpcPromise, 8000);\n\n      console.log('RPC call result:', { data, error });\n\n      if (error) {\n        console.error('Database error creating organization:', error);\n        \n        if (error.message.includes('function') || error.message.includes('does not exist') || error.message.includes('timed out')) {\n          console.log('RPC function failed or timed out, trying manual approach...');\n          return await createOrganizationManual(organizationData);\n        }\n        \n        throw error;\n      }\n\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      \n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n\n      return { data: data?.[0] || null, error: null };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return { data: null, error };\n    }\n  };\n\n  // Manual organization creation fallback\n  const createOrganizationManual = async (organizationData) => {\n    try {\n      console.log('Creating organization manually...');\n      \n      // Create organization\n      const { data: org, error: orgError } = await supabase\n        .from('organizations')\n        .insert([{\n          name: organizationData.name,\n          slug: organizationData.slug,\n          description: organizationData.description,\n          industry: organizationData.industry,\n          website: organizationData.website\n        }])\n        .select()\n        .single();\n\n      console.log('Organization insert result:', { org, orgError });\n\n      if (orgError) {\n        console.error('Error inserting organization:', orgError);\n        throw orgError;\n      }\n\n      // Add user as owner\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: org.id,\n          role: 'owner',\n        }]);\n\n      console.log('User organization insert result:', { userOrgError });\n\n      if (userOrgError) {\n        console.error('Error inserting user organization:', userOrgError);\n        throw userOrgError;\n      }\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      \n      // Set the new organization as current\n      setCurrentOrganization({\n        organization_id: org.id,\n        organization_name: org.name,\n        organization_slug: org.slug,\n        role: 'owner'\n      });\n\n      return { data: org, error: null };\n    } catch (error) {\n      console.error('Error in manual organization creation:', error);\n      return { data: null, error };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async (invitationToken) => {\n    try {\n      // Get invitation details\n      const { data: invitation, error: inviteError } = await supabase\n        .from('organization_invitations')\n        .select('*')\n        .eq('token', invitationToken)\n        .eq('accepted_at', null)\n        .gt('expires_at', new Date().toISOString())\n        .single();\n\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: invitation.organization_id,\n          role: invitation.role,\n        }]);\n\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const { error: updateError } = await supabase\n        .from('organization_invitations')\n        .update({ accepted_at: new Date().toISOString() })\n        .eq('id', invitation.id);\n\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      return { data: invitation, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      setUserProfile(data);\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const { data, error } = await supabase\n        .rpc('has_permission', {\n          org_id: organizationId,\n          required_role: requiredRole,\n        });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    let isMounted = true;\n\n    const initializeAuth = async () => {\n      if (!isMounted) return;\n\n      try {\n        setAuthError(null);\n        console.log('Initializing auth...');\n        \n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session?.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          \n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n          console.log('User profile loaded');\n          \n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          console.log('User organizations loaded');\n          \n          if (userOrgs && userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n            console.log('Set current organization');\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error during auth initialization:', error);\n        if (isMounted) setAuthError(error);\n      } finally {\n        if (isMounted) {\n          console.log('Auth initialization complete');\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeAuth();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization,\n    authError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}