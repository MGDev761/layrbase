{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Fetch all employees for an organization\nexport async function fetchEmployees(organization_id) {\n  const {\n    data,\n    error\n  } = await supabase.from('employees').select('*').eq('organization_id', organization_id).order('name');\n  if (error) throw error;\n  return data;\n}\n\n// Add a new employee\nexport async function addEmployee(employee) {\n  const {\n    data,\n    error\n  } = await supabase.from('employees').insert([employee]).select().single();\n  if (error) throw error;\n  return data;\n}\n\n// Update an employee\nexport async function updateEmployee(id, updates) {\n  const {\n    data,\n    error\n  } = await supabase.from('employees').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n}\n\n// Delete an employee\nexport async function deleteEmployee(id) {\n  const {\n    error\n  } = await supabase.from('employees').delete().eq('id', id);\n  if (error) throw error;\n}\n\n// Fetch org chart (all employees with manager_id)\nexport async function fetchOrgChart(organization_id) {\n  const {\n    data,\n    error\n  } = await supabase.from('employees').select('*').eq('organization_id', organization_id);\n  if (error) throw error;\n  return data;\n}","map":{"version":3,"names":["supabase","fetchEmployees","organization_id","data","error","from","select","eq","order","addEmployee","employee","insert","single","updateEmployee","id","updates","update","deleteEmployee","delete","fetchOrgChart"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/employeesService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Fetch all employees for an organization\nexport async function fetchEmployees(organization_id) {\n  const { data, error } = await supabase\n    .from('employees')\n    .select('*')\n    .eq('organization_id', organization_id)\n    .order('name');\n  if (error) throw error;\n  return data;\n}\n\n// Add a new employee\nexport async function addEmployee(employee) {\n  const { data, error } = await supabase\n    .from('employees')\n    .insert([employee])\n    .select()\n    .single();\n  if (error) throw error;\n  return data;\n}\n\n// Update an employee\nexport async function updateEmployee(id, updates) {\n  const { data, error } = await supabase\n    .from('employees')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single();\n  if (error) throw error;\n  return data;\n}\n\n// Delete an employee\nexport async function deleteEmployee(id) {\n  const { error } = await supabase\n    .from('employees')\n    .delete()\n    .eq('id', id);\n  if (error) throw error;\n}\n\n// Fetch org chart (all employees with manager_id)\nexport async function fetchOrgChart(organization_id) {\n  const { data, error } = await supabase\n    .from('employees')\n    .select('*')\n    .eq('organization_id', organization_id);\n  if (error) throw error;\n  return data;\n} "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;;AAE1C;AACA,OAAO,eAAeC,cAAcA,CAACC,eAAe,EAAE;EACpD,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,WAAW,CAAC,CACjBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,iBAAiB,EAAEL,eAAe,CAAC,CACtCM,KAAK,CAAC,MAAM,CAAC;EAChB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAeM,WAAWA,CAACC,QAAQ,EAAE;EAC1C,MAAM;IAAEP,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,WAAW,CAAC,CACjBM,MAAM,CAAC,CAACD,QAAQ,CAAC,CAAC,CAClBJ,MAAM,CAAC,CAAC,CACRM,MAAM,CAAC,CAAC;EACX,IAAIR,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAeU,cAAcA,CAACC,EAAE,EAAEC,OAAO,EAAE;EAChD,MAAM;IAAEZ,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,WAAW,CAAC,CACjBW,MAAM,CAACD,OAAO,CAAC,CACfR,EAAE,CAAC,IAAI,EAAEO,EAAE,CAAC,CACZR,MAAM,CAAC,CAAC,CACRM,MAAM,CAAC,CAAC;EACX,IAAIR,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb;;AAEA;AACA,OAAO,eAAec,cAAcA,CAACH,EAAE,EAAE;EACvC,MAAM;IAAEV;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAAC,WAAW,CAAC,CACjBa,MAAM,CAAC,CAAC,CACRX,EAAE,CAAC,IAAI,EAAEO,EAAE,CAAC;EACf,IAAIV,KAAK,EAAE,MAAMA,KAAK;AACxB;;AAEA;AACA,OAAO,eAAee,aAAaA,CAACjB,eAAe,EAAE;EACnD,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,WAAW,CAAC,CACjBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,iBAAiB,EAAEL,eAAe,CAAC;EACzC,IAAIE,KAAK,EAAE,MAAMA,KAAK;EACtB,OAAOD,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}