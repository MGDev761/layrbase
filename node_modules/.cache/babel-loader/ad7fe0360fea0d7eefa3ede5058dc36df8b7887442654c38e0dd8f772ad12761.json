{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders() {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').select('*').order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareholder(shareholder) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').insert([shareholder]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateShareholder(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('shareholders').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteShareholder(id) {\n    const {\n      error\n    } = await supabase.from('shareholders').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // Share Classes\n  async getShareClasses() {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').select('*').order('name');\n    if (error) throw error;\n    return data;\n  },\n  async createShareClass(shareClass) {\n    const {\n      data,\n      error\n    } = await supabase.from('share_classes').insert([shareClass]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Financing Rounds\n  async getFinancingRounds() {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').select(`\n        *,\n        share_classes(name)\n      `).order('date', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  },\n  async createFinancingRound(round) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').insert([round]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateFinancingRound(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('financing_rounds').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteFinancingRound(id) {\n    const {\n      error\n    } = await supabase.from('financing_rounds').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // Transactions\n  async getTransactions(roundId = null) {\n    try {\n      let query = supabase.from('transactions').select(`\n          *,\n          shareholders(name, role),\n          financing_rounds(name, date)\n        `).order('created_at');\n      if (roundId) {\n        query = query.eq('round_id', roundId);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n\n      // Fetch share classes separately if needed\n      if (data && data.length > 0) {\n        const roundIds = [...new Set(data.map(tx => tx.round_id).filter(Boolean))];\n        if (roundIds.length > 0) {\n          const {\n            data: roundsData\n          } = await supabase.from('financing_rounds').select('id, share_classes(name)').in('id', roundIds);\n          const roundMap = {};\n          roundsData === null || roundsData === void 0 ? void 0 : roundsData.forEach(round => {\n            var _round$share_classes;\n            roundMap[round.id] = ((_round$share_classes = round.share_classes) === null || _round$share_classes === void 0 ? void 0 : _round$share_classes.name) || 'Common';\n          });\n\n          // Add share class to transactions\n          data.forEach(tx => {\n            tx.shareClass = roundMap[tx.round_id] || 'Common';\n          });\n        }\n      }\n      return data || [];\n    } catch (error) {\n      console.error('Error in getTransactions:', error);\n      throw error;\n    }\n  },\n  async createTransaction(transaction) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').insert([transaction]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateTransaction(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('transactions').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteTransaction(id) {\n    const {\n      error\n    } = await supabase.from('transactions').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // Preference Terms\n  async getPreferenceTerms() {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').select(`\n        *,\n        share_classes(name)\n      `);\n    if (error) throw error;\n    return data;\n  },\n  async createPreferenceTerm(term) {\n    const {\n      data,\n      error\n    } = await supabase.from('preference_terms').insert([term]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // Cap Table Calculations\n  async getCapTableAtRound(roundId = null) {\n    try {\n      // If no round is specified, fetch all transactions for the \"Current\" state.\n      if (!roundId) {\n        const {\n          data: allTransactions,\n          error: allTxError\n        } = await supabase.from('transactions').select(`*, shareholders(name, role)`);\n        if (allTxError) throw allTxError;\n        await this.attachShareClassesToTransactions(allTransactions);\n        return this.calculateCapTableFromTransactions(allTransactions || []);\n      }\n\n      // If a specific round IS specified:\n      // 1. Fetch all rounds to establish the full chronology.\n      const {\n        data: allRounds,\n        error: roundsError\n      } = await supabase.from('financing_rounds').select('id, date').order('date', {\n        ascending: true\n      }); // Order from oldest to newest.\n\n      if (roundsError) throw roundsError;\n\n      // 2. Find the date of the selected round.\n      const selectedRound = allRounds.find(r => r.id === roundId);\n      if (!selectedRound) {\n        // If round not found, return an empty state.\n        return this.calculateCapTableFromTransactions([]);\n      }\n\n      // 3. Identify all rounds that occurred up to and including the selected one.\n      const relevantRoundIds = allRounds.filter(r => new Date(r.date) <= new Date(selectedRound.date)).map(r => r.id);\n\n      // 4. Fetch all transactions belonging to those cumulative rounds.\n      const {\n        data: transactions,\n        error: txError\n      } = await supabase.from('transactions').select(`*, shareholders(name, role)`).in('round_id', relevantRoundIds);\n      if (txError) throw txError;\n\n      // 5. Attach share class info and calculate the final cap table.\n      await this.attachShareClassesToTransactions(transactions);\n      return this.calculateCapTableFromTransactions(transactions || []);\n    } catch (error) {\n      console.error('Error in getCapTableAtRound:', error);\n      throw error;\n    }\n  },\n  async attachShareClassesToTransactions(transactions) {\n    if (!transactions || transactions.length === 0) {\n      return;\n    }\n    const roundIds = [...new Set(transactions.map(tx => tx.round_id).filter(Boolean))];\n    if (roundIds.length === 0) {\n      return;\n    }\n    const {\n      data: roundsData\n    } = await supabase.from('financing_rounds').select('id, share_classes(name)').in('id', roundIds);\n    const roundMap = {};\n    roundsData === null || roundsData === void 0 ? void 0 : roundsData.forEach(round => {\n      var _round$share_classes2;\n      roundMap[round.id] = ((_round$share_classes2 = round.share_classes) === null || _round$share_classes2 === void 0 ? void 0 : _round$share_classes2.name) || 'Common';\n    });\n    transactions.forEach(tx => {\n      tx.shareClass = roundMap[tx.round_id] || 'Common';\n    });\n  },\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        var _tx$shareholders, _tx$shareholders2;\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: ((_tx$shareholders = tx.shareholders) === null || _tx$shareholders === void 0 ? void 0 : _tx$shareholders.name) || 'Unknown',\n          role: ((_tx$shareholders2 = tx.shareholders) === null || _tx$shareholders2 === void 0 ? void 0 : _tx$shareholders2.role) || 'Unknown',\n          shares: 0,\n          investment: 0,\n          shareClass: tx.shareClass || 'Common'\n        };\n      }\n      holdings[shareholderId].shares += parseFloat(tx.shares_issued || 0);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued || 0);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: totalShares > 0 ? holding.shares / totalShares * 100 : 0\n    }));\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0)\n      }\n    };\n  },\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const {\n      capTable\n    } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = acquisitionAmount * acquisitionPercentage / 100;\n\n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable.filter(shareholder => shareholder.shareClass.includes('Preferred')).map(shareholder => {\n      const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n      const multiplier = term ? term.multiplier : 1;\n      const preferenceAmount = shareholder.investment * multiplier;\n      const conversionValue = shareholder.ownership / 100 * acquisitionValue;\n      let finalValue;\n      if (preferenceType === 'non-participating') {\n        finalValue = Math.max(preferenceAmount, conversionValue);\n      } else {\n        finalValue = preferenceAmount + conversionValue;\n      }\n      return {\n        ...shareholder,\n        preferenceAmount,\n        conversionValue,\n        finalValue,\n        tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n        multiplier\n      };\n    });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? shareholder.ownership / totalCommonOwnership * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1\n        };\n      }\n    });\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds\n    };\n  }\n};","map":{"version":3,"names":["supabase","capTableService","getShareholders","data","error","from","select","order","createShareholder","shareholder","insert","single","updateShareholder","id","updates","update","eq","deleteShareholder","delete","getShareClasses","createShareClass","shareClass","getFinancingRounds","ascending","createFinancingRound","round","updateFinancingRound","deleteFinancingRound","getTransactions","roundId","query","length","roundIds","Set","map","tx","round_id","filter","Boolean","roundsData","in","roundMap","forEach","_round$share_classes","share_classes","name","console","createTransaction","transaction","updateTransaction","deleteTransaction","getPreferenceTerms","createPreferenceTerm","term","getCapTableAtRound","allTransactions","allTxError","attachShareClassesToTransactions","calculateCapTableFromTransactions","allRounds","roundsError","selectedRound","find","r","relevantRoundIds","Date","date","transactions","txError","_round$share_classes2","holdings","totalShares","shareholderId","shareholder_id","_tx$shareholders","_tx$shareholders2","shareholders","role","shares","investment","parseFloat","shares_issued","investment_amount","capTable","Object","values","holding","ownership","summary","totalInvestment","reduce","sum","h","calculateExitScenario","acquisitionAmount","acquisitionPercentage","preferenceType","actualAcquisitionValue","preferenceTerms","calculateExitValues","acquisitionValue","preferencePayouts","includes","t","multiplier","preferenceAmount","conversionValue","finalValue","Math","max","tookPreference","totalPreferencePayout","p","remainingProceeds","commonShareholders","s","totalCommonOwnership","exitCalculations","preferencePayout","commonShare","totalExitValue","calc"],"sources":["/Users/markgiblin/Desktop/layrbase/src/services/capTableService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Shareholders\nexport const capTableService = {\n  // Shareholders\n  async getShareholders() {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .select('*')\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareholder(shareholder) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .insert([shareholder])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateShareholder(id, updates) {\n    const { data, error } = await supabase\n      .from('shareholders')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteShareholder(id) {\n    const { error } = await supabase\n      .from('shareholders')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  // Share Classes\n  async getShareClasses() {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .select('*')\n      .order('name');\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createShareClass(shareClass) {\n    const { data, error } = await supabase\n      .from('share_classes')\n      .insert([shareClass])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Financing Rounds\n  async getFinancingRounds() {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .select(`\n        *,\n        share_classes(name)\n      `)\n      .order('date', { ascending: false });\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createFinancingRound(round) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .insert([round])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateFinancingRound(id, updates) {\n    const { data, error } = await supabase\n      .from('financing_rounds')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteFinancingRound(id) {\n    const { error } = await supabase\n      .from('financing_rounds')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  // Transactions\n  async getTransactions(roundId = null) {\n    try {\n      let query = supabase\n        .from('transactions')\n        .select(`\n          *,\n          shareholders(name, role),\n          financing_rounds(name, date)\n        `)\n        .order('created_at');\n      \n      if (roundId) {\n        query = query.eq('round_id', roundId);\n      }\n      \n      const { data, error } = await query;\n      if (error) throw error;\n      \n      // Fetch share classes separately if needed\n      if (data && data.length > 0) {\n        const roundIds = [...new Set(data.map(tx => tx.round_id).filter(Boolean))];\n        if (roundIds.length > 0) {\n          const { data: roundsData } = await supabase\n            .from('financing_rounds')\n            .select('id, share_classes(name)')\n            .in('id', roundIds);\n          \n          const roundMap = {};\n          roundsData?.forEach(round => {\n            roundMap[round.id] = round.share_classes?.name || 'Common';\n          });\n          \n          // Add share class to transactions\n          data.forEach(tx => {\n            tx.shareClass = roundMap[tx.round_id] || 'Common';\n          });\n        }\n      }\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error in getTransactions:', error);\n      throw error;\n    }\n  },\n\n  async createTransaction(transaction) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .insert([transaction])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async updateTransaction(id, updates) {\n    const { data, error } = await supabase\n      .from('transactions')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async deleteTransaction(id) {\n    const { error } = await supabase\n      .from('transactions')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  // Preference Terms\n  async getPreferenceTerms() {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .select(`\n        *,\n        share_classes(name)\n      `);\n    \n    if (error) throw error;\n    return data;\n  },\n\n  async createPreferenceTerm(term) {\n    const { data, error } = await supabase\n      .from('preference_terms')\n      .insert([term])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Cap Table Calculations\n  async getCapTableAtRound(roundId = null) {\n    try {\n      // If no round is specified, fetch all transactions for the \"Current\" state.\n      if (!roundId) {\n        const { data: allTransactions, error: allTxError } = await supabase\n          .from('transactions')\n          .select(`*, shareholders(name, role)`);\n          \n        if (allTxError) throw allTxError;\n        \n        await this.attachShareClassesToTransactions(allTransactions);\n        return this.calculateCapTableFromTransactions(allTransactions || []);\n      }\n\n      // If a specific round IS specified:\n      // 1. Fetch all rounds to establish the full chronology.\n      const { data: allRounds, error: roundsError } = await supabase\n        .from('financing_rounds')\n        .select('id, date')\n        .order('date', { ascending: true }); // Order from oldest to newest.\n\n      if (roundsError) throw roundsError;\n\n      // 2. Find the date of the selected round.\n      const selectedRound = allRounds.find(r => r.id === roundId);\n      if (!selectedRound) {\n        // If round not found, return an empty state.\n        return this.calculateCapTableFromTransactions([]);\n      }\n\n      // 3. Identify all rounds that occurred up to and including the selected one.\n      const relevantRoundIds = allRounds\n        .filter(r => new Date(r.date) <= new Date(selectedRound.date))\n        .map(r => r.id);\n\n      // 4. Fetch all transactions belonging to those cumulative rounds.\n      const { data: transactions, error: txError } = await supabase\n        .from('transactions')\n        .select(`*, shareholders(name, role)`)\n        .in('round_id', relevantRoundIds);\n\n      if (txError) throw txError;\n      \n      // 5. Attach share class info and calculate the final cap table.\n      await this.attachShareClassesToTransactions(transactions);\n      return this.calculateCapTableFromTransactions(transactions || []);\n\n    } catch (error) {\n      console.error('Error in getCapTableAtRound:', error);\n      throw error;\n    }\n  },\n\n  async attachShareClassesToTransactions(transactions) {\n    if (!transactions || transactions.length === 0) {\n      return;\n    }\n    const roundIds = [...new Set(transactions.map(tx => tx.round_id).filter(Boolean))];\n    if (roundIds.length === 0) {\n      return;\n    }\n    \n    const { data: roundsData } = await supabase\n      .from('financing_rounds')\n      .select('id, share_classes(name)')\n      .in('id', roundIds);\n      \n    const roundMap = {};\n    roundsData?.forEach(round => {\n      roundMap[round.id] = round.share_classes?.name || 'Common';\n    });\n    \n    transactions.forEach(tx => {\n      tx.shareClass = roundMap[tx.round_id] || 'Common';\n    });\n  },\n\n  calculateCapTableFromTransactions(transactions) {\n    const holdings = {};\n    let totalShares = 0;\n\n    // Aggregate shares by shareholder\n    transactions.forEach(tx => {\n      const shareholderId = tx.shareholder_id;\n      if (!holdings[shareholderId]) {\n        holdings[shareholderId] = {\n          id: shareholderId,\n          name: tx.shareholders?.name || 'Unknown',\n          role: tx.shareholders?.role || 'Unknown',\n          shares: 0,\n          investment: 0,\n          shareClass: tx.shareClass || 'Common',\n        };\n      }\n      \n      holdings[shareholderId].shares += parseFloat(tx.shares_issued || 0);\n      holdings[shareholderId].investment += parseFloat(tx.investment_amount || 0);\n      totalShares += parseFloat(tx.shares_issued || 0);\n    });\n\n    // Calculate ownership percentages\n    const capTable = Object.values(holdings).map(holding => ({\n      ...holding,\n      ownership: totalShares > 0 ? (holding.shares / totalShares) * 100 : 0,\n    }));\n\n    return {\n      capTable,\n      totalShares,\n      summary: {\n        totalShares,\n        totalInvestment: capTable.reduce((sum, h) => sum + h.investment, 0),\n      }\n    };\n  },\n\n  // Exit Scenario Calculations\n  async calculateExitScenario(acquisitionAmount, acquisitionPercentage, preferenceType = 'non-participating') {\n    const { capTable } = await this.getCapTableAtRound();\n    const actualAcquisitionValue = (acquisitionAmount * acquisitionPercentage) / 100;\n    \n    // Get preference terms\n    const preferenceTerms = await this.getPreferenceTerms();\n    \n    return this.calculateExitValues(capTable, actualAcquisitionValue, preferenceTerms, preferenceType);\n  },\n\n  calculateExitValues(capTable, acquisitionValue, preferenceTerms, preferenceType) {\n    // Calculate preference payouts\n    const preferencePayouts = capTable\n      .filter(shareholder => shareholder.shareClass.includes('Preferred'))\n      .map(shareholder => {\n        const term = preferenceTerms.find(t => t.share_classes.name === shareholder.shareClass);\n        const multiplier = term ? term.multiplier : 1;\n        const preferenceAmount = shareholder.investment * multiplier;\n        const conversionValue = (shareholder.ownership / 100) * acquisitionValue;\n        \n        let finalValue;\n        if (preferenceType === 'non-participating') {\n          finalValue = Math.max(preferenceAmount, conversionValue);\n        } else {\n          finalValue = preferenceAmount + conversionValue;\n        }\n\n        return {\n          ...shareholder,\n          preferenceAmount,\n          conversionValue,\n          finalValue,\n          tookPreference: preferenceType === 'participating' || preferenceAmount > conversionValue,\n          multiplier,\n        };\n      });\n\n    // Calculate remaining proceeds\n    const totalPreferencePayout = preferencePayouts.reduce((sum, p) => sum + p.finalValue, 0);\n    const remainingProceeds = Math.max(0, acquisitionValue - totalPreferencePayout);\n\n    // Distribute remaining to common shareholders\n    const commonShareholders = capTable.filter(s => s.shareClass === 'Common');\n    const totalCommonOwnership = commonShareholders.reduce((sum, s) => sum + s.ownership, 0);\n\n    const exitCalculations = capTable.map(shareholder => {\n      if (shareholder.shareClass.includes('Preferred')) {\n        const preferencePayout = preferencePayouts.find(p => p.id === shareholder.id);\n        return preferencePayout;\n      } else {\n        const commonShare = totalCommonOwnership > 0 ? (shareholder.ownership / totalCommonOwnership) * remainingProceeds : 0;\n        return {\n          ...shareholder,\n          preferenceAmount: 0,\n          conversionValue: commonShare,\n          finalValue: commonShare,\n          tookPreference: false,\n          multiplier: 1,\n        };\n      }\n    });\n\n    return {\n      exitCalculations,\n      totalExitValue: exitCalculations.reduce((sum, calc) => sum + calc.finalValue, 0),\n      totalPreferencePayout,\n      remainingProceeds,\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}