{"ast":null,"code":"var _jsxFileName = \"/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_organizations');\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({\n    email,\n    password,\n    firstName,\n    lastName\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName\n          }\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({\n    email,\n    password\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async organizationData => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n\n      // Use the database function to create organization and add user as owner\n      const {\n        data,\n        error\n      } = await supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n      if (error) {\n        console.error('Database error creating organization:', error);\n        throw error;\n      }\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n      return {\n        data: (data === null || data === void 0 ? void 0 : data[0]) || null,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async invitationToken => {\n    try {\n      // Get invitation details\n      const {\n        data: invitation,\n        error: inviteError\n      } = await supabase.from('organization_invitations').select('*').eq('token', invitationToken).eq('accepted_at', null).gt('expires_at', new Date().toISOString()).single();\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: invitation.organization_id,\n        role: invitation.role\n      }]);\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const {\n        error: updateError\n      } = await supabase.from('organization_invitations').update({\n        accepted_at: new Date().toISOString()\n      }).eq('id', invitation.id);\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      return {\n        data: invitation,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async updates => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) throw error;\n      setUserProfile(data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('has_permission', {\n        org_id: organizationId,\n        required_role: requiredRole\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        console.log('Initializing auth...');\n\n        // Get current session\n        const {\n          data: {\n            session\n          },\n          error: sessionError\n        } = await supabase.auth.getSession();\n        if (sessionError) {\n          console.error('Session error:', sessionError);\n        }\n        if (session !== null && session !== void 0 && session.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          try {\n            // Get user profile\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n            console.log('User profile loaded:', profile);\n          } catch (profileError) {\n            console.error('Error loading user profile:', profileError);\n          }\n          try {\n            // Get user organizations\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            console.log('User organizations loaded:', userOrgs);\n\n            // Set first organization as current\n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n              console.log('Set current organization:', userOrgs[0]);\n            }\n          } catch (orgError) {\n            console.error('Error loading user organizations:', orgError);\n            setOrganizations([]);\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        console.log('Auth initialization complete, setting loading to false');\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user;\n      console.log('Auth state changed:', event, session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email);\n      if (session !== null && session !== void 0 && session.user) {\n        setUser(session.user);\n        try {\n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n        } catch (error) {\n          console.error('Error loading profile on auth change:', error);\n        }\n        try {\n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          if (userOrgs && userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n          }\n        } catch (error) {\n          console.error('Error loading organizations on auth change:', error);\n          setOrganizations([]);\n        }\n      } else {\n        setUser(null);\n        setUserProfile(null);\n        setOrganizations([]);\n        setCurrentOrganization(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"nLehpgXAMqJx2WzZ4IHjtLLS0Fo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","userProfile","setUserProfile","organizations","setOrganizations","currentOrganization","setCurrentOrganization","loading","setLoading","getUserProfile","userId","data","error","from","select","eq","single","console","getUserOrganizations","rpc","signUp","email","password","firstName","lastName","auth","options","first_name","last_name","signIn","signInWithPassword","signOut","createOrganization","organizationData","log","org_name","name","org_slug","slug","org_description","description","org_industry","industry","org_website","website","userOrgs","length","newOrg","organization_id","organization_name","organization_slug","role","joinOrganization","invitationToken","invitation","inviteError","gt","Date","toISOString","userOrgError","insert","user_id","id","updateError","update","accepted_at","updateUserProfile","updates","hasPermission","organizationId","requiredRole","org_id","required_role","initializeAuth","session","sessionError","getSession","profile","profileError","orgError","subscription","onAuthStateChange","event","_session$user","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async (userId) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const { data, error } = await supabase\n        .rpc('get_user_organizations');\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({ email, password, firstName, lastName }) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          },\n        },\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({ email, password }) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async (organizationData) => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n      \n      // Use the database function to create organization and add user as owner\n      const { data, error } = await supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n\n      if (error) {\n        console.error('Database error creating organization:', error);\n        throw error;\n      }\n\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      \n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n\n      return { data: data?.[0] || null, error: null };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return { data: null, error };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async (invitationToken) => {\n    try {\n      // Get invitation details\n      const { data: invitation, error: inviteError } = await supabase\n        .from('organization_invitations')\n        .select('*')\n        .eq('token', invitationToken)\n        .eq('accepted_at', null)\n        .gt('expires_at', new Date().toISOString())\n        .single();\n\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: invitation.organization_id,\n          role: invitation.role,\n        }]);\n\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const { error: updateError } = await supabase\n        .from('organization_invitations')\n        .update({ accepted_at: new Date().toISOString() })\n        .eq('id', invitation.id);\n\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      return { data: invitation, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      setUserProfile(data);\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const { data, error } = await supabase\n        .rpc('has_permission', {\n          org_id: organizationId,\n          required_role: requiredRole,\n        });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        console.log('Initializing auth...');\n        \n        // Get current session\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          console.error('Session error:', sessionError);\n        }\n        \n        if (session?.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          \n          try {\n            // Get user profile\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n            console.log('User profile loaded:', profile);\n          } catch (profileError) {\n            console.error('Error loading user profile:', profileError);\n          }\n          \n          try {\n            // Get user organizations\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            console.log('User organizations loaded:', userOrgs);\n            \n            // Set first organization as current\n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n              console.log('Set current organization:', userOrgs[0]);\n            }\n          } catch (orgError) {\n            console.error('Error loading user organizations:', orgError);\n            setOrganizations([]);\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        console.log('Auth initialization complete, setting loading to false');\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        \n        if (session?.user) {\n          setUser(session.user);\n          \n          try {\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n          } catch (error) {\n            console.error('Error loading profile on auth change:', error);\n          }\n          \n          try {\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            \n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n            }\n          } catch (error) {\n            console.error('Error loading organizations on auth change:', error);\n            setOrganizations([]);\n          }\n        } else {\n          setUser(null);\n          setUserProfile(null);\n          setOrganizations([]);\n          setCurrentOrganization(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}