{"ast":null,"code":"var _jsxFileName = \"/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_organizations');\n      if (error) {\n        var _await$supabase$auth$;\n        console.error('Error calling get_user_organizations RPC:', error);\n\n        // Fallback: direct query if RPC function doesn't exist\n        console.log('Trying fallback query...');\n        const {\n          data: fallbackData,\n          error: fallbackError\n        } = await supabase.from('user_organizations').select(`\n            organization_id,\n            role,\n            is_active,\n            organizations (\n              id,\n              name,\n              slug\n            )\n          `).eq('user_id', (_await$supabase$auth$ = (await supabase.auth.getUser()).data.user) === null || _await$supabase$auth$ === void 0 ? void 0 : _await$supabase$auth$.id).eq('is_active', true);\n        if (fallbackError) {\n          console.error('Fallback query also failed:', fallbackError);\n          return [];\n        }\n\n        // Transform fallback data to match expected format\n        return fallbackData.map(item => {\n          var _item$organizations, _item$organizations2;\n          return {\n            organization_id: item.organization_id,\n            organization_name: (_item$organizations = item.organizations) === null || _item$organizations === void 0 ? void 0 : _item$organizations.name,\n            organization_slug: (_item$organizations2 = item.organizations) === null || _item$organizations2 === void 0 ? void 0 : _item$organizations2.slug,\n            role: item.role,\n            is_active: item.is_active\n          };\n        });\n      }\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({\n    email,\n    password,\n    firstName,\n    lastName\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName\n          }\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({\n    email,\n    password\n  }) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async organizationData => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n\n      // Use the database function to create organization and add user as owner\n      const {\n        data,\n        error\n      } = await supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n      if (error) {\n        console.error('Database error creating organization:', error);\n        throw error;\n      }\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n      return {\n        data: (data === null || data === void 0 ? void 0 : data[0]) || null,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async invitationToken => {\n    try {\n      // Get invitation details\n      const {\n        data: invitation,\n        error: inviteError\n      } = await supabase.from('organization_invitations').select('*').eq('token', invitationToken).eq('accepted_at', null).gt('expires_at', new Date().toISOString()).single();\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const {\n        error: userOrgError\n      } = await supabase.from('user_organizations').insert([{\n        user_id: user.id,\n        organization_id: invitation.organization_id,\n        role: invitation.role\n      }]);\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const {\n        error: updateError\n      } = await supabase.from('organization_invitations').update({\n        accepted_at: new Date().toISOString()\n      }).eq('id', invitation.id);\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      return {\n        data: invitation,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async updates => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').update(updates).eq('id', user.id).select().single();\n      if (error) throw error;\n      setUserProfile(data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('has_permission', {\n        org_id: organizationId,\n        required_role: requiredRole\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        console.log('Initializing auth...');\n\n        // Get current session\n        const {\n          data: {\n            session\n          },\n          error: sessionError\n        } = await supabase.auth.getSession();\n        if (sessionError) {\n          console.error('Session error:', sessionError);\n        }\n        if (session !== null && session !== void 0 && session.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          try {\n            // Get user profile\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n            console.log('User profile loaded:', profile);\n          } catch (profileError) {\n            console.error('Error loading user profile:', profileError);\n          }\n          try {\n            // Get user organizations\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            console.log('User organizations loaded:', userOrgs);\n\n            // Set first organization as current\n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n              console.log('Set current organization:', userOrgs[0]);\n            }\n          } catch (orgError) {\n            console.error('Error loading user organizations:', orgError);\n            setOrganizations([]);\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        console.log('Auth initialization complete, setting loading to false');\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user;\n      console.log('Auth state changed:', event, session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email);\n      if (session !== null && session !== void 0 && session.user) {\n        setUser(session.user);\n        try {\n          const profile = await getUserProfile(session.user.id);\n          setUserProfile(profile);\n        } catch (error) {\n          console.error('Error loading profile on auth change:', error);\n        }\n        try {\n          const userOrgs = await getUserOrganizations();\n          setOrganizations(userOrgs);\n          if (userOrgs && userOrgs.length > 0) {\n            setCurrentOrganization(userOrgs[0]);\n          }\n        } catch (error) {\n          console.error('Error loading organizations on auth change:', error);\n          setOrganizations([]);\n        }\n      } else {\n        setUser(null);\n        setUserProfile(null);\n        setOrganizations([]);\n        setCurrentOrganization(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"nLehpgXAMqJx2WzZ4IHjtLLS0Fo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","userProfile","setUserProfile","organizations","setOrganizations","currentOrganization","setCurrentOrganization","loading","setLoading","getUserProfile","userId","data","error","from","select","eq","single","console","getUserOrganizations","rpc","_await$supabase$auth$","log","fallbackData","fallbackError","auth","getUser","id","map","item","_item$organizations","_item$organizations2","organization_id","organization_name","name","organization_slug","slug","role","is_active","signUp","email","password","firstName","lastName","options","first_name","last_name","signIn","signInWithPassword","signOut","createOrganization","organizationData","org_name","org_slug","org_description","description","org_industry","industry","org_website","website","userOrgs","length","newOrg","joinOrganization","invitationToken","invitation","inviteError","gt","Date","toISOString","userOrgError","insert","user_id","updateError","update","accepted_at","updateUserProfile","updates","hasPermission","organizationId","requiredRole","org_id","required_role","initializeAuth","session","sessionError","getSession","profile","profileError","orgError","subscription","onAuthStateChange","event","_session$user","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markgiblin/Desktop/layrbase/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [currentOrganization, setCurrentOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Get user profile\n  const getUserProfile = async (userId) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  };\n\n  // Get user organizations\n  const getUserOrganizations = async () => {\n    try {\n      const { data, error } = await supabase\n        .rpc('get_user_organizations');\n\n      if (error) {\n        console.error('Error calling get_user_organizations RPC:', error);\n        \n        // Fallback: direct query if RPC function doesn't exist\n        console.log('Trying fallback query...');\n        const { data: fallbackData, error: fallbackError } = await supabase\n          .from('user_organizations')\n          .select(`\n            organization_id,\n            role,\n            is_active,\n            organizations (\n              id,\n              name,\n              slug\n            )\n          `)\n          .eq('user_id', (await supabase.auth.getUser()).data.user?.id)\n          .eq('is_active', true);\n\n        if (fallbackError) {\n          console.error('Fallback query also failed:', fallbackError);\n          return [];\n        }\n\n        // Transform fallback data to match expected format\n        return fallbackData.map(item => ({\n          organization_id: item.organization_id,\n          organization_name: item.organizations?.name,\n          organization_slug: item.organizations?.slug,\n          role: item.role,\n          is_active: item.is_active\n        }));\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user organizations:', error);\n      return [];\n    }\n  };\n\n  // Sign up\n  const signUp = async ({ email, password, firstName, lastName }) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          },\n        },\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign in\n  const signIn = async ({ email, password }) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      setUser(null);\n      setUserProfile(null);\n      setOrganizations([]);\n      setCurrentOrganization(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Create organization\n  const createOrganization = async (organizationData) => {\n    try {\n      console.log('Creating organization with data:', organizationData);\n      \n      // Use the database function to create organization and add user as owner\n      const { data, error } = await supabase.rpc('create_organization_with_owner', {\n        org_name: organizationData.name,\n        org_slug: organizationData.slug,\n        org_description: organizationData.description,\n        org_industry: organizationData.industry,\n        org_website: organizationData.website\n      });\n\n      if (error) {\n        console.error('Database error creating organization:', error);\n        throw error;\n      }\n\n      console.log('Organization created successfully:', data);\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n      \n      // Set the new organization as current\n      if (data && data.length > 0) {\n        const newOrg = data[0];\n        setCurrentOrganization({\n          organization_id: newOrg.organization_id,\n          organization_name: newOrg.organization_name,\n          organization_slug: newOrg.organization_slug,\n          role: newOrg.role\n        });\n      }\n\n      return { data: data?.[0] || null, error: null };\n    } catch (error) {\n      console.error('Error creating organization:', error);\n      return { data: null, error };\n    }\n  };\n\n  // Join organization\n  const joinOrganization = async (invitationToken) => {\n    try {\n      // Get invitation details\n      const { data: invitation, error: inviteError } = await supabase\n        .from('organization_invitations')\n        .select('*')\n        .eq('token', invitationToken)\n        .eq('accepted_at', null)\n        .gt('expires_at', new Date().toISOString())\n        .single();\n\n      if (inviteError) throw inviteError;\n\n      // Add user to organization\n      const { error: userOrgError } = await supabase\n        .from('user_organizations')\n        .insert([{\n          user_id: user.id,\n          organization_id: invitation.organization_id,\n          role: invitation.role,\n        }]);\n\n      if (userOrgError) throw userOrgError;\n\n      // Mark invitation as accepted\n      const { error: updateError } = await supabase\n        .from('organization_invitations')\n        .update({ accepted_at: new Date().toISOString() })\n        .eq('id', invitation.id);\n\n      if (updateError) throw updateError;\n\n      // Refresh organizations\n      const userOrgs = await getUserOrganizations();\n      setOrganizations(userOrgs);\n\n      return { data: invitation, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      setUserProfile(data);\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // Check permissions\n  const hasPermission = async (organizationId, requiredRole) => {\n    try {\n      const { data, error } = await supabase\n        .rpc('has_permission', {\n          org_id: organizationId,\n          required_role: requiredRole,\n        });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        console.log('Initializing auth...');\n        \n        // Get current session\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          console.error('Session error:', sessionError);\n        }\n        \n        if (session?.user) {\n          console.log('User found:', session.user.email);\n          setUser(session.user);\n          \n          try {\n            // Get user profile\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n            console.log('User profile loaded:', profile);\n          } catch (profileError) {\n            console.error('Error loading user profile:', profileError);\n          }\n          \n          try {\n            // Get user organizations\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            console.log('User organizations loaded:', userOrgs);\n            \n            // Set first organization as current\n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n              console.log('Set current organization:', userOrgs[0]);\n            }\n          } catch (orgError) {\n            console.error('Error loading user organizations:', orgError);\n            setOrganizations([]);\n          }\n        } else {\n          console.log('No user session found');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n      } finally {\n        console.log('Auth initialization complete, setting loading to false');\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        \n        if (session?.user) {\n          setUser(session.user);\n          \n          try {\n            const profile = await getUserProfile(session.user.id);\n            setUserProfile(profile);\n          } catch (error) {\n            console.error('Error loading profile on auth change:', error);\n          }\n          \n          try {\n            const userOrgs = await getUserOrganizations();\n            setOrganizations(userOrgs);\n            \n            if (userOrgs && userOrgs.length > 0) {\n              setCurrentOrganization(userOrgs[0]);\n            }\n          } catch (error) {\n            console.error('Error loading organizations on auth change:', error);\n            setOrganizations([]);\n          }\n        } else {\n          setUser(null);\n          setUserProfile(null);\n          setOrganizations([]);\n          setCurrentOrganization(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const value = {\n    user,\n    userProfile,\n    organizations,\n    currentOrganization,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    createOrganization,\n    joinOrganization,\n    updateUserProfile,\n    hasPermission,\n    setCurrentOrganization,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}